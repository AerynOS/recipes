From 35aa6cd15ffc9110a6ceabc2611589a745f9722a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Wed, 14 Feb 2024 00:10:23 +0100
Subject: [PATCH 1/5] dir: use a more clear distinction between some local
 variables

conf_dir vs. config_dir tell us nothing. conf_dir vs. conf_dir_str is
certainly more clear.
---
 common/flatpak-dir.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index bfb7baf2d8..344941c5a4 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -3921,7 +3921,7 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
   g_autoptr(GFile) conf_dir = NULL;
   g_autoptr(GFileEnumerator) dir_enum = NULL;
   g_autoptr(GError) my_error = NULL;
-  g_autofree char *config_dir = NULL;
+  g_autofree char *conf_dir_str = NULL;
   g_auto(GStrv) remotes = NULL;
   g_auto(GStrv) applied_remotes = NULL;
 
@@ -3933,10 +3933,10 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
        strcmp (self->extra_data->id, SYSTEM_DIR_DEFAULT_ID) != 0))
     return NULL;
 
-  config_dir = g_strdup_printf ("%s/%s",
+  conf_dir_str = g_strdup_printf ("%s/%s",
                                 get_config_dir_location (),
                                 SYSCONF_REMOTES_DIR);
-  conf_dir = g_file_new_for_path (config_dir);
+  conf_dir = g_file_new_for_path (conf_dir_str);
   dir_enum = g_file_enumerate_children (conf_dir,
                                         G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_TYPE,
                                         G_FILE_QUERY_INFO_NONE,
@@ -3959,7 +3959,7 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
                                       NULL, &my_error))
         {
           g_info ("Unexpected error reading file in %s: %s",
-                  config_dir, my_error->message);
+                  conf_dir_str, my_error->message);
           break;
         }
 

From 26423f8fa69b26063895d59fcea57de46942bfb0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Wed, 14 Feb 2024 00:14:10 +0100
Subject: [PATCH 2/5] dir: remove unused variable passed to
 g_file_enumerator_iterate

---
 common/flatpak-dir.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index 344941c5a4..872a352889 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -3951,11 +3951,10 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
   while (TRUE)
     {
       GFileInfo *file_info;
-      GFile *path;
       const char *name;
       guint32 type;
 
-      if (!g_file_enumerator_iterate (dir_enum, &file_info, &path,
+      if (!g_file_enumerator_iterate (dir_enum, &file_info, NULL,
                                       NULL, &my_error))
         {
           g_info ("Unexpected error reading file in %s: %s",

From 9ef2be1a4de7b6711d0ea3b8f6e6bc2bc636a923 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Wed, 14 Feb 2024 00:42:07 +0100
Subject: [PATCH 3/5] dir: split flatpakrepos dir scanning logic into a
 different function

This a preparatory commit for the follow-up changes, where we will be
looking at more directories.
---
 common/flatpak-dir.c | 79 +++++++++++++++++++++++++++-----------------
 1 file changed, 49 insertions(+), 30 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index 872a352889..422385bfb9 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -3914,39 +3914,25 @@ copy_remote_config (GKeyFile *config,
     }
 }
 
-static GHashTable *
-_flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
+static void
+_flatpak_dir_scan_new_flatpakrepos (const char          *dir_str,
+                                    GHashTable         **flatpakrepos,
+                                    const char * const  *remotes)
 {
-  g_autoptr(GHashTable) flatpakrepos = NULL;
   g_autoptr(GFile) conf_dir = NULL;
   g_autoptr(GFileEnumerator) dir_enum = NULL;
   g_autoptr(GError) my_error = NULL;
-  g_autofree char *conf_dir_str = NULL;
-  g_auto(GStrv) remotes = NULL;
-  g_auto(GStrv) applied_remotes = NULL;
-
-  g_assert (repo != NULL);
 
-  /* Predefined remotes only applies for the default system installation */
-  if (self->user ||
-      (self->extra_data != NULL &&
-       strcmp (self->extra_data->id, SYSTEM_DIR_DEFAULT_ID) != 0))
-    return NULL;
+  g_return_if_fail (dir_str != NULL);
+  g_return_if_fail (flatpakrepos != NULL);
 
-  conf_dir_str = g_strdup_printf ("%s/%s",
-                                get_config_dir_location (),
-                                SYSCONF_REMOTES_DIR);
-  conf_dir = g_file_new_for_path (conf_dir_str);
+  conf_dir = g_file_new_for_path (dir_str);
   dir_enum = g_file_enumerate_children (conf_dir,
                                         G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_TYPE,
                                         G_FILE_QUERY_INFO_NONE,
                                         NULL, &my_error);
   if (my_error != NULL)
-    return NULL;
-
-  remotes = ostree_repo_remote_list (repo, NULL);
-  applied_remotes = g_key_file_get_string_list (ostree_repo_get_config (repo),
-                                                "core", "xa.applied-remotes", NULL, NULL);
+    return;
 
   while (TRUE)
     {
@@ -3958,7 +3944,7 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
                                       NULL, &my_error))
         {
           g_info ("Unexpected error reading file in %s: %s",
-                  conf_dir_str, my_error->message);
+                  dir_str, my_error->message);
           break;
         }
 
@@ -3972,18 +3958,51 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
         {
           g_autofree char *remote_name = g_strndup (name, strlen (name) - strlen (SYSCONF_REMOTES_FILE_EXT));
 
-          if (remotes && g_strv_contains ((const char * const *)remotes, remote_name))
-            continue;
-
-          if (applied_remotes && g_strv_contains ((const char * const *)applied_remotes, remote_name))
+          if (remotes && g_strv_contains (remotes, remote_name))
             continue;
 
-          if (flatpakrepos == NULL)
-            flatpakrepos = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_object_unref);
+          if (*flatpakrepos == NULL)
+            *flatpakrepos = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_object_unref);
 
-          g_hash_table_insert (flatpakrepos, g_steal_pointer (&remote_name), g_file_enumerator_get_child (dir_enum, file_info));
+          g_hash_table_insert (*flatpakrepos, g_steal_pointer (&remote_name), g_file_enumerator_get_child (dir_enum, file_info));
         }
     }
+}
+
+static GHashTable *
+_flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
+{
+  g_autoptr(GHashTable) flatpakrepos = NULL;
+  g_autofree char *conf_dir_str = NULL;
+  g_auto(GStrv) ostree_remotes = NULL;
+  g_auto(GStrv) applied_remotes = NULL;
+  g_autoptr(GPtrArray) remotes = NULL;
+
+  g_assert (repo != NULL);
+
+  /* Predefined remotes only applies for the default system installation */
+  if (self->user ||
+      (self->extra_data &&
+       g_strcmp0 (self->extra_data->id, SYSTEM_DIR_DEFAULT_ID) != 0))
+    return NULL;
+
+  ostree_remotes = ostree_repo_remote_list (repo, NULL);
+  applied_remotes = g_key_file_get_string_list (ostree_repo_get_config (repo),
+                                                "core", "xa.applied-remotes", NULL, NULL);
+  remotes = g_ptr_array_new ();
+  for (int i = 0; ostree_remotes && ostree_remotes[i]; i++)
+    g_ptr_array_add (remotes, ostree_remotes[i]);
+  for (int i = 0; applied_remotes && applied_remotes[i]; i++)
+    g_ptr_array_add (remotes, applied_remotes[i]);
+  g_ptr_array_add (remotes, NULL);
+
+  conf_dir_str = g_strdup_printf ("%s/%s",
+                                get_config_dir_location (),
+                                SYSCONF_REMOTES_DIR);
+
+  _flatpak_dir_scan_new_flatpakrepos (conf_dir_str,
+                                      &flatpakrepos,
+                                      (const char * const *) remotes->pdata);
 
   return g_steal_pointer (&flatpakrepos);
 }

From bb4579bbd51a131b3e41420fb9d05896ba818b47 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Wed, 14 Feb 2024 00:57:10 +0100
Subject: [PATCH 4/5] dir: search for repositories also under FLATPAK_BASEDIR

This is more compliant with FHS specification. Most notably, /etc
is not appropriate to hold distro configuration, which is a common
use for the remotes.d feature. It is better practice to put things
under /usr/share, and let the system administrator modify /etc to
their will, of course giving them priority.

Update documentation to reflect this change.

In the process, move to use g_build_filename
---
 common/flatpak-dir.c   | 26 ++++++++++++++------------
 doc/flatpak-remote.xml |  6 +++++-
 doc/flatpak.xml        |  6 +++++-
 doc/flatpakrepo.xml    | 10 +++++++---
 4 files changed, 31 insertions(+), 17 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index 422385bfb9..bdbbf3d976 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -80,8 +80,9 @@
 
 #define SYSCONF_INSTALLATIONS_DIR "installations.d"
 #define SYSCONF_INSTALLATIONS_FILE_EXT ".conf"
-#define SYSCONF_REMOTES_DIR "remotes.d"
-#define SYSCONF_REMOTES_FILE_EXT ".flatpakrepo"
+
+#define FLATPAK_REMOTES_DIR "remotes.d"
+#define FLATPAK_REMOTES_FILE_EXT ".flatpakrepo"
 
 #define SIDELOAD_REPOS_DIR_NAME "sideload-repos"
 
@@ -3919,15 +3920,15 @@ _flatpak_dir_scan_new_flatpakrepos (const char          *dir_str,
                                     GHashTable         **flatpakrepos,
                                     const char * const  *remotes)
 {
-  g_autoptr(GFile) conf_dir = NULL;
+  g_autoptr(GFile) dir = NULL;
   g_autoptr(GFileEnumerator) dir_enum = NULL;
   g_autoptr(GError) my_error = NULL;
 
   g_return_if_fail (dir_str != NULL);
   g_return_if_fail (flatpakrepos != NULL);
 
-  conf_dir = g_file_new_for_path (dir_str);
-  dir_enum = g_file_enumerate_children (conf_dir,
+  dir = g_file_new_for_path (dir_str);
+  dir_enum = g_file_enumerate_children (dir,
                                         G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_TYPE,
                                         G_FILE_QUERY_INFO_NONE,
                                         NULL, &my_error);
@@ -3954,9 +3955,9 @@ _flatpak_dir_scan_new_flatpakrepos (const char          *dir_str,
       name = g_file_info_get_name (file_info);
       type = g_file_info_get_file_type (file_info);
 
-      if (type == G_FILE_TYPE_REGULAR && g_str_has_suffix (name, SYSCONF_REMOTES_FILE_EXT))
+      if (type == G_FILE_TYPE_REGULAR && g_str_has_suffix (name, FLATPAK_REMOTES_FILE_EXT))
         {
-          g_autofree char *remote_name = g_strndup (name, strlen (name) - strlen (SYSCONF_REMOTES_FILE_EXT));
+          g_autofree char *remote_name = g_strndup (name, strlen (name) - strlen (FLATPAK_REMOTES_FILE_EXT));
 
           if (remotes && g_strv_contains (remotes, remote_name))
             continue;
@@ -3973,7 +3974,7 @@ static GHashTable *
 _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
 {
   g_autoptr(GHashTable) flatpakrepos = NULL;
-  g_autofree char *conf_dir_str = NULL;
+  g_autofree char *dir_str = NULL;
   g_auto(GStrv) ostree_remotes = NULL;
   g_auto(GStrv) applied_remotes = NULL;
   g_autoptr(GPtrArray) remotes = NULL;
@@ -3996,11 +3997,12 @@ _flatpak_dir_find_new_flatpakrepos (FlatpakDir *self, OstreeRepo *repo)
     g_ptr_array_add (remotes, applied_remotes[i]);
   g_ptr_array_add (remotes, NULL);
 
-  conf_dir_str = g_strdup_printf ("%s/%s",
-                                get_config_dir_location (),
-                                SYSCONF_REMOTES_DIR);
+  dir_str = g_build_filename (get_config_dir_location (), FLATPAK_REMOTES_DIR, NULL);
+  _flatpak_dir_scan_new_flatpakrepos (dir_str,
+                                      &flatpakrepos,
+                                      (const char * const *) remotes->pdata);
 
-  _flatpak_dir_scan_new_flatpakrepos (conf_dir_str,
+  _flatpak_dir_scan_new_flatpakrepos (FLATPAK_BASEDIR "/" FLATPAK_REMOTES_DIR,
                                       &flatpakrepos,
                                       (const char * const *) remotes->pdata);
 
diff --git a/doc/flatpak-remote.xml b/doc/flatpak-remote.xml
index 916ff752b5..798f5c392c 100644
--- a/doc/flatpak-remote.xml
+++ b/doc/flatpak-remote.xml
@@ -46,7 +46,11 @@
 
        <para>
             System-wide remotes can be statically preconfigured by dropping
-            <citerefentry><refentrytitle>flatpakrepo</refentrytitle><manvolnum>5</manvolnum></citerefentry> files into <filename>/etc/flatpak/remotes.d/</filename>.
+            <citerefentry><refentrytitle>flatpakrepo</refentrytitle><manvolnum>5</manvolnum></citerefentry>
+            files into <filename>/usr/share/flatpak/remotes.d/</filename> and
+            <filename>/etc/flatpak/remotes.d/</filename>. Ifa file with
+            the same name exists in both, the file under
+            <filename>/etc</filename> will take precedence.
        </para>
 
     </refsect1>
diff --git a/doc/flatpak.xml b/doc/flatpak.xml
index 6dcc58c3e5..e23d957f3c 100644
--- a/doc/flatpak.xml
+++ b/doc/flatpak.xml
@@ -60,7 +60,11 @@
 
        <para>
             System-wide remotes can be statically preconfigured by dropping
-            <citerefentry><refentrytitle>flatpakrepo</refentrytitle><manvolnum>5</manvolnum></citerefentry> files into <filename>/etc/flatpak/remotes.d/</filename>.
+            <citerefentry><refentrytitle>flatpakrepo</refentrytitle><manvolnum>5</manvolnum></citerefentry>
+            files into <filename>/usr/share/flatpak/remotes.d/</filename> and
+            <filename>/etc/flatpak/remotes.d/</filename>. If a file with
+            the same name exists in both, the file under
+            <filename>/etc</filename> will take precedence.
        </para>
 
         <para>
diff --git a/doc/flatpakrepo.xml b/doc/flatpakrepo.xml
index 41f372cf2f..3cadbeab6f 100644
--- a/doc/flatpakrepo.xml
+++ b/doc/flatpakrepo.xml
@@ -48,9 +48,13 @@
         </para>
 
         <para>
-           flatpakrepo files can also be placed in <filename>/etc/flatpak/remotes.d/</filename>
-           to statically preconfigure system-wide remotes. Such files must use the
-           <filename>.flatpakrepo</filename> extension.
+          flatpakrepo files can also be placed in
+          <filename>/usr/share/flatpak/remotes.d/</filename> and
+          <filename>/etc/flatpak/remotes.d/</filename>
+          to statically preconfigure system-wide remotes. Such files must use the
+          <filename>.flatpakrepo</filename> extension. If a file with the
+          same name exists in both, the file under <filename>/etc</filename> will
+          take precedence.
         </para>
 
     </refsect1>

From c5dd17c5e1c64932c478bd3dcfed583cec45dab8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Wed, 31 Jul 2024 16:48:07 +0200
Subject: [PATCH 5/5] dir: do not pass a GError to g_file_enumerate_children if
 ignoring it

We seem to have no interest in the specific error, as we are using it
locally just to "return". So there's no point in having the error in
the first place. In consequence, the error is only used in the loop
and can be declared locally to it.
---
 common/flatpak-dir.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/common/flatpak-dir.c b/common/flatpak-dir.c
index bdbbf3d976..a86c915646 100644
--- a/common/flatpak-dir.c
+++ b/common/flatpak-dir.c
@@ -3922,7 +3922,6 @@ _flatpak_dir_scan_new_flatpakrepos (const char          *dir_str,
 {
   g_autoptr(GFile) dir = NULL;
   g_autoptr(GFileEnumerator) dir_enum = NULL;
-  g_autoptr(GError) my_error = NULL;
 
   g_return_if_fail (dir_str != NULL);
   g_return_if_fail (flatpakrepos != NULL);
@@ -3931,8 +3930,8 @@ _flatpak_dir_scan_new_flatpakrepos (const char          *dir_str,
   dir_enum = g_file_enumerate_children (dir,
                                         G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_TYPE,
                                         G_FILE_QUERY_INFO_NONE,
-                                        NULL, &my_error);
-  if (my_error != NULL)
+                                        NULL, NULL);
+  if (dir_enum == NULL)
     return;
 
   while (TRUE)
@@ -3940,12 +3939,13 @@ _flatpak_dir_scan_new_flatpakrepos (const char          *dir_str,
       GFileInfo *file_info;
       const char *name;
       guint32 type;
+      g_autoptr(GError) local_error = NULL;
 
       if (!g_file_enumerator_iterate (dir_enum, &file_info, NULL,
-                                      NULL, &my_error))
+                                      NULL, &local_error))
         {
           g_info ("Unexpected error reading file in %s: %s",
-                  dir_str, my_error->message);
+                  dir_str, local_error->message);
           break;
         }
 
