#
# SPDX-FileCopyrightText: Â© 2020-2024 Serpent OS Developers
#
# SPDX-License-Identifier: MPL-2.0
#
name        : nvidia-open-gpu-kernel-modules
version     : "570.190"
release     : 50
homepage    : https://github.com/NVIDIA/open-gpu-kernel-modules
upstreams   :
    - https://download.nvidia.com/XFree86/NVIDIA-kernel-module-source/NVIDIA-kernel-module-source-570.190.tar.xz : a3aef1feba4ccbbca236d1824b4799cda8c23da560f375454380ce1a1ecbfd64
    - https://us.download.nvidia.com/XFree86/Linux-x86_64/570.190/NVIDIA-Linux-x86_64-570.190.run:
        hash: a86058a7ed203bf769ea05b270fed279445f5d4e833eafefdfa7fa45feaab8fc
        unpack: false
        rename: NVIDIA.run
summary     : NVIDIA open GPU kernel modules
description : |
    NVIDIA open GPU kernel modules
license     : GPL-2.0-only
builddeps   :
    - binary(cpio)
    - binary(eu-readelf)
    - binary(jq)
    - binary(zstd)
    - linux-desktop
    - linux-desktop-devel
rundeps     :
    - sysbinary(depmod)
tuning      :
    - asneeded: false
    - base: false
    - bindnow: false
    - icf: false
    - relr: false
    - symbolic: false
    - build-id: false
    - lto: false
    - compress-debug: false
environment : |
    export KERNEL_UNAME=`jq --raw-output .version /usr/lib/kernel/*.desktop/boot.json` || exit 1
setup       : |
    %patch %(pkgdir)/fix-hdmi-names.patch
build       : |
    %make CC=%(cc) LD=%(ld) KERNEL_UNAME=$KERNEL_UNAME NV_VERBOSE=1 modules
install     : |
    %install_dir %(installroot)%(libdir)/kernel/$KERNEL_UNAME

    %install_file kernel-open/*.ko -t %(installroot)%(libdir)/modules/$KERNEL_UNAME/kernel/drivers/video

    # Manually construct the debug info from the kernel modules
    %install_dir %(installroot)%(libdir)/debug/.build-id
    pushd %(installroot)
    module_list=()
    while IFS=  read -r -d $'\0'; do
        module_list+=("$REPLY")
    done < <(find .%(libdir)/modules -type f -name "*.ko" -print0)
    for module in "${module_list[@]}"; do
        build_id=$(eu-readelf -n ${module} | grep Bui | awk '{print $3}')
        debug_path="%(libdir)/debug/.build-id/${build_id:0:2}/${build_id: 2}.debug"
        %install_dir $(dirname .${debug_path})
        llvm-objcopy --only-keep-debug "${module}" ".${debug_path}"
        llvm-objcopy --add-gnu-debuglink ".${debug_path}" "${module}"
        llvm-strip -g --strip-unneeded "${module}"
    done
    popd

    # Create an initrd for the firmware and .ko files
    sh %(sourcedir)/NVIDIA.run --extract-only --target extracted
    mkdir -p initrd/eb-nvidia
    mkdir -p initrd/eb-nvidia-fw/%(version)
    %install_file extracted/firmware/*.bin initrd/eb-nvidia-fw/%(version)/.
    find %(installroot)%(libdir)/modules -name '*.ko' -exec cp -v {} initrd/eb-nvidia \;
    touch initrd/.dracut-depmod-invalidate
    pushd initrd
    find . | cpio -o -H newc | zstd -19 -T0 -c > %(installroot)%(libdir)/kernel/$KERNEL_UNAME/60-nvidia.initrd
    popd

    %install_file %(pkgdir)/20-nvidia.cmdline %(installroot)%(libdir)/kernel/$KERNEL_UNAME/60-nvidia.cmdline
    %install_file %(pkgdir)/nvidia-noview.conf %(installroot)%(libdir)/modprobe.d/nvidia-noview.conf
    %install_file %(pkgdir)/nvidia-uvm.conf %(installroot)%(libdir)/modules-load.d/nvidia-uvm.conf

    # Compress modules with zstd
    find "%(installroot)%(libdir)/modules" -name '*.ko' -print -exec zstd {} \; -exec rm -v {} \;
