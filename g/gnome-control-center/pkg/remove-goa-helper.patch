diff --git a/panels/online-accounts/cc-online-account-provider-row.c b/panels/online-accounts/cc-online-account-provider-row.c
index d581d1523ba6fc8f5666892e11562d3ffc1aff15..b86426145beeb5d0d8e2558ceb32f2a2bfd1fa00 100644
--- a/panels/online-accounts/cc-online-account-provider-row.c
+++ b/panels/online-accounts/cc-online-account-provider-row.c
@@ -19,6 +19,10 @@
 #include <config.h>
 #include <glib/gi18n.h>
 
+#define GOA_API_IS_SUBJECT_TO_CHANGE
+#define GOA_BACKEND_API_IS_SUBJECT_TO_CHANGE
+#include <goabackend/goabackend.h>
+
 #include "cc-online-account-provider-row.h"
 #include "cc-online-accounts-resources.h"
 
@@ -28,7 +32,7 @@ struct _CcOnlineAccountProviderRow
 
   GtkImage *icon_image;
 
-  GVariant *provider;
+  GoaProvider *provider;
 };
 
 G_DEFINE_TYPE (CcOnlineAccountProviderRow, cc_online_account_provider_row, ADW_TYPE_ACTION_ROW)
@@ -56,7 +60,7 @@ cc_online_account_provider_row_dispose (GObject *object)
 {
   CcOnlineAccountProviderRow *self = CC_ONLINE_ACCOUNT_PROVIDER_ROW (object);
 
-  g_clear_pointer (&self->provider, g_variant_unref);
+  g_clear_object (&self->provider);
 
   G_OBJECT_CLASS (cc_online_account_provider_row_parent_class)->dispose (object);
 }
@@ -81,7 +85,7 @@ cc_online_account_provider_row_init (CcOnlineAccountProviderRow *self)
 }
 
 CcOnlineAccountProviderRow *
-cc_online_account_provider_row_new (GVariant *provider)
+cc_online_account_provider_row_new (GoaProvider *provider)
 {
   CcOnlineAccountProviderRow *self;
   g_autoptr(GIcon) icon = NULL;
@@ -96,18 +100,9 @@ cc_online_account_provider_row_new (GVariant *provider)
     }
   else
     {
-      g_autoptr(GVariant) icon_variant = NULL;
-
-      self->provider = g_variant_ref (provider);
-
-      g_variant_get (provider, "(ssviu)",
-                     NULL,
-                     &name,
-                     &icon_variant,
-                     NULL,
-                     NULL);
-
-      icon = g_icon_deserialize (icon_variant);
+      self->provider = g_object_ref (provider);
+      icon = goa_provider_get_provider_icon (provider, NULL);
+      name = goa_provider_get_provider_name (provider, NULL);
     }
 
   gtk_image_set_from_gicon (self->icon_image, icon);
@@ -127,7 +122,7 @@ cc_online_account_provider_row_new (GVariant *provider)
   return self;
 }
 
-GVariant *
+GoaProvider *
 cc_online_account_provider_row_get_provider (CcOnlineAccountProviderRow *self)
 {
   g_return_val_if_fail (CC_IS_ONLINE_ACCOUNT_PROVIDER_ROW (self), NULL);
diff --git a/panels/online-accounts/cc-online-account-provider-row.h b/panels/online-accounts/cc-online-account-provider-row.h
index 6f75a5bb25118762fd3067fd5f82ab6ef514ffaf..78cb307956eacec92c92d37ab02340670415ef26 100644
--- a/panels/online-accounts/cc-online-account-provider-row.h
+++ b/panels/online-accounts/cc-online-account-provider-row.h
@@ -21,12 +21,16 @@
 #include <gtk/gtk.h>
 #include <adwaita.h>
 
+#define GOA_API_IS_SUBJECT_TO_CHANGE
+#define GOA_BACKEND_API_IS_SUBJECT_TO_CHANGE
+#include <goabackend/goabackend.h>
+
 G_BEGIN_DECLS
 
 G_DECLARE_FINAL_TYPE (CcOnlineAccountProviderRow, cc_online_account_provider_row, CC, ONLINE_ACCOUNT_PROVIDER_ROW, AdwActionRow)
 
-CcOnlineAccountProviderRow *cc_online_account_provider_row_new          (GVariant *provider);
+CcOnlineAccountProviderRow *cc_online_account_provider_row_new (GoaProvider *provider);
 
-GVariant                   *cc_online_account_provider_row_get_provider (CcOnlineAccountProviderRow *row);
+GoaProvider *cc_online_account_provider_row_get_provider (CcOnlineAccountProviderRow *row);
 
 G_END_DECLS
diff --git a/panels/online-accounts/cc-online-accounts-panel.c b/panels/online-accounts/cc-online-accounts-panel.c
index 139f38e17880a8fa1c49257d22807c1d7aa0521b..15cca5bda2366732a50b6a4e8f4456021bbe7890 100644
--- a/panels/online-accounts/cc-online-accounts-panel.c
+++ b/panels/online-accounts/cc-online-accounts-panel.c
@@ -32,12 +32,9 @@
 #include "cc-online-account-row.h"
 #include "cc-online-accounts-resources.h"
 
-#ifdef GDK_WINDOWING_X11
-#include <gdk/x11/gdkx.h>
-#endif
-#ifdef GDK_WINDOWING_WAYLAND
-#include <gdk/wayland/gdkwayland.h>
-#endif
+#define GOA_API_IS_SUBJECT_TO_CHANGE
+#define GOA_BACKEND_API_IS_SUBJECT_TO_CHANGE
+#include <goabackend/goabackend.h>
 
 struct _CcOnlineAccountsPanel
 {
@@ -45,27 +42,13 @@ struct _CcOnlineAccountsPanel
 
   GtkFrame      *accounts_frame;
   GtkListBox    *accounts_listbox;
-  GtkWidget     *close_notification_button;
-  GtkDialog     *edit_account_dialog;
-  GtkHeaderBar  *edit_account_headerbar;
-  GtkBox        *editor_box;
-  GtkLabel      *notification_label;
-  GtkRevealer   *notification_revealer;
   AdwBanner     *offline_banner;
   GtkListBox    *providers_listbox;
-  GtkButton     *remove_account_button;
-  GtkBox        *accounts_vbox;
 
   GoaClient *client;
-  GoaObject *active_object;
-  GoaObject *removed_object;
-
-  guint      remove_account_timeout_id;
-  gchar     *window_export_handle;
+  GVariant *parameters;
 };
 
-static gboolean remove_account_timeout_cb (gpointer user_data);
-
 CC_PANEL_REGISTER (CcOnlineAccountsPanel, cc_online_accounts_panel);
 
 enum {
@@ -77,15 +60,6 @@ enum {
 
 typedef void (*RowForAccountCallback) (CcOnlineAccountsPanel *self, GtkWidget *row, GList *other_rows);
 
-static void
-hide_row_for_account_cb (CcOnlineAccountsPanel *self,
-                         GtkWidget             *row,
-                         GList                 *other_rows)
-{
-  gtk_widget_set_visible (row, FALSE);
-  gtk_widget_set_visible (GTK_WIDGET (self->accounts_frame), other_rows != NULL);
-}
-
 static void
 remove_row_for_account_cb (CcOnlineAccountsPanel *self,
                            GtkWidget             *row,
@@ -95,15 +69,6 @@ remove_row_for_account_cb (CcOnlineAccountsPanel *self,
   gtk_widget_set_visible (GTK_WIDGET (self->accounts_frame), other_rows != NULL);
 }
 
-static void
-show_row_for_account_cb (CcOnlineAccountsPanel *self,
-                         GtkWidget             *row,
-                         GList                 *other_rows)
-{
-  gtk_widget_set_visible (row, TRUE);
-  gtk_widget_set_visible (GTK_WIDGET (self->accounts_frame), TRUE);
-}
-
 static void
 modify_row_for_account (CcOnlineAccountsPanel *self,
                         GoaObject             *object,
@@ -141,365 +106,84 @@ modify_row_for_account (CcOnlineAccountsPanel *self,
   g_list_free (children);
 }
 
-/* Auxiliary methods */
-
-G_GNUC_NULL_TERMINATED
-static char *
-run_goa_helper_sync (const char *command,
-                     ...)
-{
-  g_autoptr(GPtrArray) argv = NULL;
-  g_autofree char *output = NULL;
-  g_autoptr(GError) error = NULL;
-  const char *param;
-  va_list args;
-  int status;
-
-  argv = g_ptr_array_new_with_free_func (g_free);
-  g_ptr_array_add (argv, g_strdup (LIBEXECDIR "/gnome-control-center-goa-helper"));
-  g_ptr_array_add (argv, g_strdup (command));
-
-  va_start (args, command);
-  while ((param = va_arg (args, const char*)) != NULL)
-    g_ptr_array_add (argv, g_strdup (param));
-  va_end (args);
-
-  g_ptr_array_add (argv, NULL);
-
-  if (!g_spawn_sync (NULL,
-                     (char **) argv->pdata,
-                     NULL,
-                     0,
-                     NULL,
-                     NULL,
-                     &output,
-                     NULL,
-                     &status,
-                     &error))
-    {
-      g_warning ("Failed to run online accounts helper: %s", error->message);
-      return NULL;
-    }
-
-  if (!g_spawn_check_wait_status (status, NULL))
-    return NULL;
-
-  if (output == NULL || *output == '\0')
-    return NULL;
-
-  return g_steal_pointer (&output);
-}
-
-static void
-run_goa_helper_in_thread_func (GTask        *task,
-                               gpointer      source_object,
-                               gpointer      task_data,
-                               GCancellable *cancellable)
-{
-  g_autofree char *output = NULL;
-  g_autoptr(GError) error = NULL;
-  GPtrArray *argv = task_data;
-  int status;
-
-  g_spawn_sync (NULL,
-                (char **) argv->pdata,
-                NULL, 0, NULL, NULL,
-                &output,
-                NULL,
-                &status,
-                &error);
-
-  if (error)
-    {
-      g_task_return_error (task, g_steal_pointer (&error));
-      return;
-    }
-
-  if (!g_spawn_check_wait_status (status, &error))
-    {
-      g_task_return_error (task, g_steal_pointer (&error));
-      return;
-    }
-
-  g_task_return_pointer (task, g_steal_pointer (&output), g_free);
-}
-
-static void
-run_goa_helper_async (const gchar         *command,
-                      const gchar         *param,
-                      const gchar         *window_handle,
-                      GCancellable        *cancellable,
-                      GAsyncReadyCallback  callback,
-                      gpointer             user_data)
-{
-  g_autoptr(GPtrArray) argv = NULL;
-  g_autoptr(GTask) task = NULL;
-
-  g_return_if_fail (!cancellable || G_IS_CANCELLABLE (cancellable));
-
-  argv = g_ptr_array_new_with_free_func (g_free);
-  g_ptr_array_add (argv, g_strdup (LIBEXECDIR "/gnome-control-center-goa-helper"));
-  g_ptr_array_add (argv, g_strdup (command));
-  g_ptr_array_add (argv, g_strdup (param));
-  g_ptr_array_add (argv, g_strdup (window_handle));
-  g_ptr_array_add (argv, NULL);
-
-  task = g_task_new (NULL, cancellable, callback, user_data);
-  g_task_set_source_tag (task, run_goa_helper_async);
-  g_task_set_task_data (task, g_steal_pointer (&argv), (GDestroyNotify) g_ptr_array_unref);
-  g_task_run_in_thread (task, run_goa_helper_in_thread_func);
-}
-
-static void
-cancel_notification_timeout (CcOnlineAccountsPanel *self)
-{
-  g_clear_handle_id (&self->remove_account_timeout_id, g_source_remove);
-  self->removed_object = NULL;
-}
-
-static void
-start_remove_account_timeout (CcOnlineAccountsPanel *self)
-{
-  GoaAccount *account;
-  g_autofree gchar *id = NULL;
-  g_autofree gchar *label = NULL;
-
-  if (self->active_object == NULL)
-    return;
-
-  if (self->removed_object != NULL)
-    gtk_widget_activate (self->close_notification_button);
-
-  self->removed_object = g_steal_pointer (&self->active_object);
-
-  account = goa_object_peek_account (self->removed_object);
-  id = g_strdup_printf ("<b>%s</b>", goa_account_get_presentation_identity (account));
-  /* Translators: The %s is the username (eg., debarshi.ray@gmail.com
-   * or rishi).
-   */
-  label = g_strdup_printf (_("%s removed"), id);
-  gtk_label_set_markup (self->notification_label, label);
-  gtk_revealer_set_reveal_child (self->notification_revealer, TRUE);
-
-  modify_row_for_account (self, self->removed_object, hide_row_for_account_cb);
-  self->remove_account_timeout_id = g_timeout_add_seconds (10, remove_account_timeout_cb, self);
-}
-
 static void
-on_show_account_finish_cb (GObject      *source_object,
-                           GAsyncResult *result,
-                           gpointer      user_data)
+show_account_cb (GoaProvider *provider,
+                 GAsyncResult *result,
+                 CcOnlineAccountsPanel *self)
 {
-  CcOnlineAccountsPanel *self = CC_ONLINE_ACCOUNTS_PANEL (user_data);
-  g_autofree char *output = NULL;
-  g_autoptr(GError) error = NULL;
+  g_autoptr (GError) error = NULL;
 
-  output = g_task_propagate_pointer (G_TASK (result), &error);
-
-  if (error)
+  if (!goa_provider_show_account_finish (provider, result, &error))
     {
-      g_warning ("Error showing account: %s", error->message);
-      return;
+      if (!g_error_matches (error, GOA_ERROR, GOA_ERROR_DIALOG_DISMISSED) && !g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Error showing account: %s", error->message);
     }
-
-  if (g_strcmp0 (output, "remove") == 0)
-    start_remove_account_timeout (self);
-
-  self->active_object = NULL;
 }
 
 static void
 show_account (CcOnlineAccountsPanel *self,
               GoaObject             *object)
 {
+  g_autoptr (GoaProvider) provider = NULL;
+  GtkRoot *root;
   GoaAccount *account;
+  const char *provider_type;
 
-  if (!self->window_export_handle)
-    return;
-
-  self->active_object = g_object_ref (object);
-
+  /* Find the provider with a matching type */
   account = goa_object_peek_account (object);
-  run_goa_helper_async ("show-account",
-                        goa_account_get_id (account),
-                        self->window_export_handle,
-                        cc_panel_get_cancellable (CC_PANEL (self)),
-                        on_show_account_finish_cb,
-                        self);
-}
-
-static void
-on_create_account_finish_cb (GObject      *source_object,
-                             GAsyncResult *result,
-                             gpointer      user_data)
-{
-  CcOnlineAccountsPanel *self = CC_ONLINE_ACCOUNTS_PANEL (user_data);
-  g_autofree char *new_account_id = NULL;
-  g_autoptr(GoaObject) object = NULL;
-  g_autoptr(GError) error = NULL;
-
-  new_account_id = g_task_propagate_pointer (G_TASK (result), &error);
-
-  if (error)
-    {
-      g_warning ("Error showing account: %s", error->message);
-      return;
-    }
-
-  if (new_account_id)
-    object = goa_client_lookup_by_id (self->client, new_account_id);
-
-  if (object)
-    show_account (self, object);
-}
-
-static void
-create_account (CcOnlineAccountsPanel *self,
-                GVariant              *provider)
-{
-  g_autofree char *provider_type = NULL;
-
-  if (!self->window_export_handle)
-    return;
-
-  g_variant_get (provider, "(ssviu)", &provider_type, NULL, NULL, NULL, NULL);
-
-  run_goa_helper_async ("create-account",
-                        provider_type,
-                        self->window_export_handle,
-                        cc_panel_get_cancellable (CC_PANEL (self)),
-                        on_create_account_finish_cb,
-                        self);
-}
-
-static void
-add_provider_row (CcOnlineAccountsPanel *self,
-                  GVariant              *provider)
-{
-  CcOnlineAccountProviderRow *row;
-
-  row = cc_online_account_provider_row_new (provider);
-
-  gtk_list_box_append (self->providers_listbox, GTK_WIDGET (row));
-}
-
-static void
-list_providers (CcOnlineAccountsPanel *self)
-{
-  g_autoptr(GVariant) providers_variant = NULL;
-  g_autoptr(GError) error = NULL;
-  g_autofree char *providers = NULL;
-  GVariantIter iter;
-  GVariant *provider;
-
-  providers = run_goa_helper_sync ("list-providers", NULL);
-
-  if (!providers)
-    return;
-
-  providers_variant = g_variant_parse (G_VARIANT_TYPE ("a(ssviu)"),
-                                       providers,
-                                       NULL,
-                                       NULL,
-                                       &error);
-
-  if (error)
+  provider_type = goa_account_get_provider_type (account);
+  provider = goa_provider_get_for_provider_type (provider_type);
+  if (provider == NULL)
     {
-      g_warning ("Error listing providers: %s", error->message);
+      g_warning ("Error showing account: Unsupported provider");
       return;
     }
 
-  g_variant_iter_init (&iter, providers_variant);
-
-  while ((provider = g_variant_iter_next_value (&iter)))
-    {
-      add_provider_row (self, provider);
-      g_variant_unref (provider);
-    }
-}
-
-static void
-add_account (CcOnlineAccountsPanel *self,
-             GoaObject             *object)
-{
-  CcOnlineAccountRow *row;
-
-  row = cc_online_account_row_new (object);
-
-  /* Add to the listbox */
-  gtk_list_box_append (self->accounts_listbox, GTK_WIDGET (row));
-  gtk_widget_set_visible (GTK_WIDGET (self->accounts_frame), TRUE);
-}
-
-static void
-fill_accounts_listbox (CcOnlineAccountsPanel *self)
-{
-  g_autolist(GoaAccount) accounts = NULL;
-  GList *l;
-
-  accounts = goa_client_get_accounts (self->client);
-
-  for (l = accounts; l != NULL; l = l->next)
-    add_account (self, l->data);
-}
-
-#ifdef GDK_WINDOWING_WAYLAND
-static void
-wayland_window_exported_cb (GdkToplevel *toplevel,
-                            const char  *handle,
-                            gpointer     data)
-
-{
-  CcOnlineAccountsPanel *self = data;
-
-  self->window_export_handle = g_strdup_printf ("wayland:%s", handle);
+  root = gtk_widget_get_root (GTK_WIDGET (self));
+  goa_provider_show_account (provider,
+                             self->client,
+                             object,
+                             GTK_WINDOW (root),
+                             cc_panel_get_cancellable (CC_PANEL (self)),
+                             (GAsyncReadyCallback) show_account_cb,
+                             self);
 }
-#endif
 
 static void
-export_window_handle (CcOnlineAccountsPanel *self)
+create_account_cb (GoaProvider *provider,
+                   GAsyncResult *result,
+                   CcOnlineAccountsPanel *self)
 {
-  GtkNative *native = gtk_widget_get_native (GTK_WIDGET (self));
+  g_autoptr (GoaObject) object = NULL;
+  g_autoptr (GError) error = NULL;
 
-#ifdef GDK_WINDOWING_X11
-  if (GDK_IS_X11_DISPLAY (gtk_widget_get_display (GTK_WIDGET (native))))
+  object = goa_provider_add_account_finish (provider, result, &error);
+  if (error != NULL)
     {
-      GdkSurface *surface = gtk_native_get_surface (native);
-      guint32 xid = (guint32) gdk_x11_surface_get_xid (surface);
+      if (!g_error_matches (error, GOA_ERROR, GOA_ERROR_DIALOG_DISMISSED) && !g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Error creating account: %s", error->message);
 
-      self->window_export_handle = g_strdup_printf ("x11:%x", xid);
+      return;
     }
-#endif
-#ifdef GDK_WINDOWING_WAYLAND
-  if (GDK_IS_WAYLAND_DISPLAY (gtk_widget_get_display (GTK_WIDGET (native))))
-    {
-      GdkSurface *surface = gtk_native_get_surface (native);
 
-      gdk_wayland_toplevel_export_handle (GDK_TOPLEVEL (surface),
-                                          wayland_window_exported_cb,
-                                          self,
-                                          NULL);
-    }
-#endif
+  show_account (self, object);
 }
 
 static void
-unexport_window_handle (CcOnlineAccountsPanel *self)
+create_account (CcOnlineAccountsPanel *self,
+                GoaProvider *provider)
 {
-  if (!self->window_export_handle)
-    return;
+  GtkRoot *parent;
 
-#ifdef GDK_WINDOWING_WAYLAND
-  GtkNative *native = gtk_widget_get_native (GTK_WIDGET (self));
-
-  if (GDK_IS_WAYLAND_DISPLAY (gtk_widget_get_display (GTK_WIDGET (native))))
-    {
-      GdkSurface *surface = gtk_native_get_surface (native);
-      gdk_wayland_toplevel_unexport_handle (GDK_TOPLEVEL (surface));
-    }
-#endif
+  g_return_if_fail (GOA_IS_PROVIDER (provider));
 
-  g_clear_pointer (&self->window_export_handle, g_free);
+  parent = gtk_widget_get_root (GTK_WIDGET (self));
+  goa_provider_add_account (provider,
+                            self->client,
+                            GTK_WINDOW (parent),
+                            cc_panel_get_cancellable (CC_PANEL (self)),
+                            (GAsyncReadyCallback) create_account_cb,
+                            self);
 }
 
 static void
@@ -531,7 +215,7 @@ command_add (CcOnlineAccountsPanel *self,
              GVariant              *parameters)
 {
   const gchar *provider_name = NULL;
-  g_autoptr(GVariant) v = NULL;
+  g_autoptr (GVariant) v = NULL;
 
   g_assert (self != NULL);
   g_assert (parameters != NULL);
@@ -555,16 +239,16 @@ command_add (CcOnlineAccountsPanel *self,
   if (provider_name != NULL)
     {
       GtkWidget *child;
-      GVariant *provider;
+      GoaProvider *provider;
 
       for (child = gtk_widget_get_first_child (GTK_WIDGET (self->providers_listbox));
            child;
            child = gtk_widget_get_next_sibling (child))
         {
-          g_autofree gchar *provider_type = NULL;
+          const char *provider_type = NULL;
 
           provider = cc_online_account_provider_row_get_provider (CC_ONLINE_ACCOUNT_PROVIDER_ROW (child));
-          g_variant_get (provider, "(ssviu)", &provider_type, NULL, NULL, NULL, NULL);
+          provider_type = goa_provider_get_provider_type (provider);
 
           if (g_strcmp0 (provider_type, provider_name) == 0)
             break;
@@ -583,7 +267,7 @@ command_add (CcOnlineAccountsPanel *self,
 static void
 load_custom_css (void)
 {
-  g_autoptr(GtkCssProvider) provider = NULL;
+  g_autoptr (GtkCssProvider) provider = NULL;
 
   provider = gtk_css_provider_new ();
   gtk_css_provider_load_from_resource (provider, "/org/gnome/control-center/online-accounts/online-accounts.css");
@@ -616,33 +300,43 @@ sort_providers_func (GtkListBoxRow *a,
                      GtkListBoxRow *b,
                      gpointer       user_data)
 {
-  GVariant *a_provider, *b_provider;
+  GoaProvider *a_provider, *b_provider;
   gboolean a_branded, b_branded;
-  gint a_features, b_features;
+  GoaProviderFeatures a_features, b_features;
 
   a_provider = cc_online_account_provider_row_get_provider (CC_ONLINE_ACCOUNT_PROVIDER_ROW (a));
+  a_features = goa_provider_get_provider_features (a_provider);
+  a_branded = (a_features & GOA_PROVIDER_FEATURE_BRANDED) != 0;
+
   b_provider = cc_online_account_provider_row_get_provider (CC_ONLINE_ACCOUNT_PROVIDER_ROW (b));
+  b_features = goa_provider_get_provider_features (b_provider);
+  b_branded = (b_features & GOA_PROVIDER_FEATURE_BRANDED) != 0;
 
-  g_variant_get (a_provider, "(ssviu)", NULL, NULL, NULL, &a_features, NULL);
-  g_variant_get (b_provider, "(ssviu)", NULL, NULL, NULL, &b_features, NULL);
+  if (a_branded != b_branded)
+    return a_branded ? -1 : 1;
 
-  /* FIXME: this needs to go away once libgoa-backend is ported to GTK4 */
-#define FEATURE_BRANDED (1 << 1)
+  return gtk_list_box_row_get_index (b) - gtk_list_box_row_get_index (a);
+}
 
-  a_branded = (a_features & FEATURE_BRANDED) != 0;
-  b_branded = (a_features & FEATURE_BRANDED) != 0;
+static void
+add_account (CcOnlineAccountsPanel *self,
+             GoaObject *object)
+{
+  CcOnlineAccountRow *row;
 
-#undef FEATURE_BRANDED
+  row = cc_online_account_row_new (object);
+  gtk_list_box_append (self->accounts_listbox, GTK_WIDGET (row));
+  gtk_widget_set_visible (GTK_WIDGET (self->accounts_frame), TRUE);
+}
 
-  if (a_branded != b_branded)
-    {
-      if (a_branded)
-        return -1;
-      else
-        return 1;
-    }
+static void
+add_provider (CcOnlineAccountsPanel *self,
+              GoaProvider *provider)
+{
+  CcOnlineAccountProviderRow *row;
 
-  return gtk_list_box_row_get_index (b) - gtk_list_box_row_get_index (a);
+  row = cc_online_account_provider_row_new (provider);
+  gtk_list_box_append (self->providers_listbox, GTK_WIDGET (row));
 }
 
 static void
@@ -652,14 +346,6 @@ on_account_added_cb (CcOnlineAccountsPanel *self,
   add_account (self, object);
 }
 
-static void
-on_account_changed_cb (CcOnlineAccountsPanel *self,
-                       GoaObject             *object)
-{
-  if (self->active_object == object)
-    show_account (self, self->active_object);
-}
-
 static void
 on_account_removed_cb (CcOnlineAccountsPanel *self,
                        GoaObject             *object)
@@ -677,75 +363,84 @@ on_accounts_listbox_row_activated (CcOnlineAccountsPanel *self,
 }
 
 static void
-on_client_remove_account_finish_cb (GoaAccount   *account,
-                                    GAsyncResult *res,
-                                    gpointer      user_data)
+on_provider_row_activated_cb (CcOnlineAccountsPanel *self,
+                              GtkListBoxRow *activated_row)
 {
-  g_autoptr(CcOnlineAccountsPanel) self = CC_ONLINE_ACCOUNTS_PANEL (user_data);
-  g_autoptr(GError) error = NULL;
-
-  goa_account_call_remove_finish (account, res, &error);
+  GoaProvider *provider = cc_online_account_provider_row_get_provider (CC_ONLINE_ACCOUNT_PROVIDER_ROW (activated_row));
 
-  if (error)
-    {
-      GtkWidget *dialog;
-      dialog = gtk_message_dialog_new (GTK_WINDOW (cc_shell_get_toplevel (cc_panel_get_shell (CC_PANEL (self)))),
-                                       GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
-                                       GTK_MESSAGE_ERROR,
-                                       GTK_BUTTONS_CLOSE,
-                                       _("Error removing account"));
-      gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (dialog),
-                                                "%s",
-                                                error->message);
-      gtk_window_present (GTK_WINDOW (dialog));
-    }
+  create_account (self, provider);
 }
 
 static void
-on_notification_closed_cb (CcOnlineAccountsPanel *self)
+goa_provider_get_all_cb (GObject *object,
+                         GAsyncResult *res,
+                         gpointer user_data)
 {
-  if (self->removed_object != NULL)
+  g_autoptr (CcOnlineAccountsPanel) self = CC_ONLINE_ACCOUNTS_PANEL (user_data);
+  g_autolist (GoaProvider) providers = NULL;
+  g_autolist (GoaAccount) accounts = NULL;
+  g_autoptr (GError) error = NULL;
+
+  /* goa_provider_get_all() doesn't have a cancellable argument, so check if
+   * the panel cancellable was triggered.
+   */
+  if (g_cancellable_is_cancelled (cc_panel_get_cancellable (CC_PANEL (self))))
+    return;
+
+  if (!goa_provider_get_all_finish (&providers, res, &error))
     {
-      goa_account_call_remove (goa_object_peek_account (self->removed_object),
-                               cc_panel_get_cancellable (CC_PANEL (self)),
-                               (GAsyncReadyCallback) on_client_remove_account_finish_cb,
-                               g_object_ref (self));
+      g_warning ("Error listing providers: %s", error->message);
+      return;
     }
 
-  gtk_revealer_set_reveal_child (self->notification_revealer, FALSE);
+  for (const GList *iter = providers; iter != NULL; iter = iter->next)
+    add_provider (self, GOA_PROVIDER (iter->data));
 
-  cancel_notification_timeout (self);
-  self->removed_object = NULL;
-}
+  /* Load existing accounts */
+  accounts = goa_client_get_accounts (self->client);
 
-static void
-on_undo_button_clicked_cb (CcOnlineAccountsPanel *self)
-{
-  /* Simply show the account row and hide the notification */
-  modify_row_for_account (self, self->removed_object, show_row_for_account_cb);
-  gtk_revealer_set_reveal_child (self->notification_revealer, FALSE);
+  for (const GList *iter = accounts; iter != NULL; iter = iter->next)
+    add_account (self, GOA_OBJECT (iter->data));
 
-  cancel_notification_timeout (self);
-  self->removed_object = NULL;
-}
+  g_signal_connect_swapped (self->client,
+                            "account-added",
+                            G_CALLBACK (on_account_added_cb),
+                            self);
 
-static void
-on_provider_row_activated_cb (CcOnlineAccountsPanel *self,
-                              GtkListBoxRow         *activated_row)
-{
-  GVariant *provider = cc_online_account_provider_row_get_provider (CC_ONLINE_ACCOUNT_PROVIDER_ROW (activated_row));
+  g_signal_connect_swapped (self->client,
+                            "account-removed",
+                            G_CALLBACK (on_account_removed_cb),
+                            self);
 
-  create_account (self, provider);
+  /* With the client ready, check if we have a pending command */
+  gtk_widget_set_sensitive (GTK_WIDGET (self), TRUE);
+
+  if (self->parameters != NULL)
+    {
+      g_autoptr (GVariant) parameters = NULL;
+
+      parameters = g_steal_pointer (&self->parameters);
+      g_object_set (self, "parameters", parameters, NULL);
+    }
 }
 
-static gboolean
-remove_account_timeout_cb (gpointer user_data)
+static void
+goa_client_new_cb (GObject *object,
+                   GAsyncResult *res,
+                   gpointer user_data)
 {
-  CcOnlineAccountsPanel *self = CC_ONLINE_ACCOUNTS_PANEL (user_data);
+  g_autoptr (CcOnlineAccountsPanel) self = CC_ONLINE_ACCOUNTS_PANEL (user_data);
+  g_autoptr (GError) error = NULL;
 
-  gtk_widget_activate (self->close_notification_button);
+  self->client = goa_client_new_finish (res, &error);
+  if (self->client == NULL)
+    {
+      g_warning ("Error connect to service: %s", error->message);
+      gtk_widget_set_sensitive (GTK_WIDGET (self), FALSE);
+      return;
+    }
 
-  return G_SOURCE_REMOVE;
+  goa_provider_get_all (goa_provider_get_all_cb, g_object_ref (self));
 }
 
 /* CcPanel overrides */
@@ -756,24 +451,6 @@ cc_online_accounts_panel_get_help_uri (CcPanel *panel)
   return "help:gnome-help/accounts";
 }
 
-/* GtkWidget overrides */
-
-static void
-cc_online_accounts_panel_realize (GtkWidget *widget)
-{
-  GTK_WIDGET_CLASS (cc_online_accounts_panel_parent_class)->realize (widget);
-
-  export_window_handle (CC_ONLINE_ACCOUNTS_PANEL (widget));
-}
-
-static void
-cc_online_accounts_panel_unrealize (GtkWidget *widget)
-{
-  unexport_window_handle (CC_ONLINE_ACCOUNTS_PANEL (widget));
-
-  GTK_WIDGET_CLASS (cc_online_accounts_panel_parent_class)->unrealize (widget);
-}
-
 /* GObject overrides */
 
 static void
@@ -782,12 +459,14 @@ cc_online_accounts_panel_set_property (GObject      *object,
                                        const GValue *value,
                                        GParamSpec   *pspec)
 {
+  CcOnlineAccountsPanel *self = CC_ONLINE_ACCOUNTS_PANEL (object);
+
   switch (property_id)
     {
       case PROP_PARAMETERS:
         {
           GVariant *parameters;
-          g_autoptr(GVariant) v = NULL;
+          g_autoptr (GVariant) v = NULL;
           const gchar *first_arg = NULL;
 
           parameters = g_value_get_variant (value);
@@ -804,10 +483,20 @@ cc_online_accounts_panel_set_property (GObject      *object,
                              (gchar *)g_variant_get_type (v));
             }
 
-          if (g_strcmp0 (first_arg, "add") == 0)
-            command_add (CC_ONLINE_ACCOUNTS_PANEL (object), parameters);
+          /* Waiting for the client to load */
+          if (self->client == NULL)
+            {
+              g_clear_pointer (&self->parameters, g_variant_unref);
+              self->parameters = g_value_dup_variant (value);
+            }
+          else if (g_strcmp0 (first_arg, "add") == 0)
+            {
+              command_add (CC_ONLINE_ACCOUNTS_PANEL (object), parameters);
+            }
           else if (first_arg != NULL)
-            select_account_by_id (CC_ONLINE_ACCOUNTS_PANEL (object), first_arg);
+            {
+              select_account_by_id (CC_ONLINE_ACCOUNTS_PANEL (object), first_arg);
+            }
 
           return;
         }
@@ -816,38 +505,13 @@ cc_online_accounts_panel_set_property (GObject      *object,
   G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
 }
 
-static void
-cc_online_accounts_panel_constructed (GObject *object)
-{
-  CcOnlineAccountsPanel *self = CC_ONLINE_ACCOUNTS_PANEL (object);
-
-  G_OBJECT_CLASS (cc_online_accounts_panel_parent_class)->constructed (object);
-
-  list_providers (self);
-}
-
 static void
 cc_online_accounts_panel_finalize (GObject *object)
 {
   CcOnlineAccountsPanel *self = CC_ONLINE_ACCOUNTS_PANEL (object);
 
-  if (self->removed_object != NULL)
-    {
-      g_autoptr(GError) error = NULL;
-      goa_account_call_remove_sync (goa_object_peek_account (self->removed_object),
-                                    NULL, /* GCancellable */
-                                    &error);
-
-      if (error != NULL)
-        {
-          g_warning ("Error removing account: %s (%s, %d)",
-                     error->message,
-                     g_quark_to_string (error->domain),
-                     error->code);
-        }
-    }
-
   g_clear_object (&self->client);
+  g_clear_pointer (&self->parameters, g_variant_unref);
 
   G_OBJECT_CLASS (cc_online_accounts_panel_parent_class)->finalize (object);
 }
@@ -863,10 +527,6 @@ cc_online_accounts_panel_class_init (CcOnlineAccountsPanelClass *klass)
 
   object_class->set_property = cc_online_accounts_panel_set_property;
   object_class->finalize = cc_online_accounts_panel_finalize;
-  object_class->constructed = cc_online_accounts_panel_constructed;
-
-  widget_class->realize = cc_online_accounts_panel_realize;
-  widget_class->unrealize = cc_online_accounts_panel_unrealize;
 
   g_object_class_override_property (object_class, PROP_PARAMETERS, "parameters");
 
@@ -874,22 +534,16 @@ cc_online_accounts_panel_class_init (CcOnlineAccountsPanelClass *klass)
 
   gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, accounts_frame);
   gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, accounts_listbox);
-  gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, close_notification_button);
-  gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, notification_label);
-  gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, notification_revealer);
   gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, offline_banner);
   gtk_widget_class_bind_template_child (widget_class, CcOnlineAccountsPanel, providers_listbox);
 
   gtk_widget_class_bind_template_callback (widget_class, on_accounts_listbox_row_activated);
-  gtk_widget_class_bind_template_callback (widget_class, on_notification_closed_cb);
   gtk_widget_class_bind_template_callback (widget_class, on_provider_row_activated_cb);
-  gtk_widget_class_bind_template_callback (widget_class, on_undo_button_clicked_cb);
 }
 
 static void
 cc_online_accounts_panel_init (CcOnlineAccountsPanel *self)
 {
-  g_autoptr(GError) error = NULL;
   GNetworkMonitor *monitor;
 
   g_resources_register (cc_online_accounts_get_resource ());
@@ -919,31 +573,11 @@ cc_online_accounts_panel_init (CcOnlineAccountsPanel *self)
                           "sensitive",
                           G_BINDING_SYNC_CREATE);
 
-  /* TODO: probably want to avoid _sync() ... */
-  self->client = goa_client_new_sync (cc_panel_get_cancellable (CC_PANEL (self)), &error);
-  if (self->client == NULL)
-    {
-      g_warning ("Error getting a GoaClient: %s (%s, %d)",
-                 error->message, g_quark_to_string (error->domain), error->code);
-      gtk_widget_set_sensitive (GTK_WIDGET (self), FALSE);
-      return;
-    }
-
-  g_signal_connect_swapped (self->client,
-                            "account-added",
-                            G_CALLBACK (on_account_added_cb),
-                            self);
-
-  g_signal_connect_swapped (self->client,
-                            "account-changed",
-                            G_CALLBACK (on_account_changed_cb),
-                            self);
-
-  g_signal_connect_swapped (self->client,
-                            "account-removed",
-                            G_CALLBACK (on_account_removed_cb),
-                            self);
-
-  fill_accounts_listbox (self);
   load_custom_css ();
+
+  /* Disable the panel while we wait for the client */
+  gtk_widget_set_sensitive (GTK_WIDGET (self), FALSE);
+  goa_client_new (cc_panel_get_cancellable (CC_PANEL (self)),
+                  goa_client_new_cb,
+                  g_object_ref (self));
 }
diff --git a/panels/online-accounts/cc-online-accounts-panel.ui b/panels/online-accounts/cc-online-accounts-panel.ui
index 7f38c7adde9bd2e614876a2f0ea5237fac3d92ec..7b5bbd66f9f3c3f87f4eebd0c60d676c65eb5305 100644
--- a/panels/online-accounts/cc-online-accounts-panel.ui
+++ b/panels/online-accounts/cc-online-accounts-panel.ui
@@ -8,96 +8,49 @@
         </child>
 
         <property name="content">
-          <object class="GtkOverlay">
-            <child type="overlay">
-              <object class="GtkRevealer" id="notification_revealer">
-                <property name="halign">center</property>
-                <property name="valign">start</property>
-                <property name="transition_type">slide-down</property>
-                <child>
-                  <object class="GtkFrame">
-                    <child>
-                      <object class="GtkBox">
-                        <property name="spacing">12</property>
-                        <child>
-                          <object class="GtkLabel" id="notification_label">
-                            <property name="use_markup">True</property>
-                          </object>
-                        </child>
-                        <child>
-                          <object class="GtkButton" id="undo_button">
-                            <property name="label" translatable="yes">Undo</property>
-                            <signal name="clicked" handler="on_undo_button_clicked_cb" object="CcOnlineAccountsPanel" swapped="yes" />
-                          </object>
-                        </child>
-                        <child>
-                          <object class="GtkButton" id="close_notification_button">
-                            <property name="icon-name">window-close-symbolic</property>
-                            <accessibility>
-                              <property name="label" translatable="yes">Close the notification</property>
-                            </accessibility>
-                            <signal name="clicked" handler="on_notification_closed_cb" object="CcOnlineAccountsPanel" swapped="yes" />
-                            <style>
-                              <class name="flat" />
-                            </style>
-                          </object>
-                        </child>
-                      </object>
-                    </child>
-                    <style>
-                      <class name="app-notification" />
-                    </style>
-                  </object>
-                </child>
+          <object class="GtkBox">
+            <property name="orientation">vertical</property>
+
+            <child>
+              <object class="AdwBanner" id="offline_banner">
+                <property name="title" translatable="yes">Offline — unable to connect accounts</property>
               </object>
             </child>
 
             <child>
-              <object class="GtkBox">
-                <property name="orientation">vertical</property>
+              <object class="AdwPreferencesPage">
+                <property name="description" translatable="yes">Allow apps to access online services by connecting your cloud accounts</property>
 
                 <child>
-                  <object class="AdwBanner" id="offline_banner">
-                    <property name="title" translatable="yes">Offline — unable to connect accounts</property>
-                  </object>
-                </child>
-
-                <child>
-                  <object class="AdwPreferencesPage">
-                    <property name="description" translatable="yes">Allow apps to access online services by connecting your cloud accounts</property>
-
+                  <object class="AdwPreferencesGroup" id="accounts_frame">
+                    <property name="title" translatable="yes">Your Accounts</property>
+                    <property name="visible">False</property>
                     <child>
-                      <object class="AdwPreferencesGroup" id="accounts_frame">
-                        <property name="title" translatable="yes">Your Accounts</property>
-                        <property name="visible">False</property>
-                        <child>
-                          <object class="GtkListBox" id="accounts_listbox">
-                            <property name="hexpand">True</property>
-                            <property name="selection_mode">none</property>
-                            <signal name="row-activated" handler="on_accounts_listbox_row_activated" object="CcOnlineAccountsPanel" swapped="yes" />
-                            <style>
-                              <class name="boxed-list" />
-                            </style>
-                            <accessibility>
-                              <relation name="labelled-by">accounts_frame</relation>
-                            </accessibility>
-                          </object>
-                        </child>
+                      <object class="GtkListBox" id="accounts_listbox">
+                        <property name="hexpand">True</property>
+                        <property name="selection_mode">none</property>
+                        <signal name="row-activated" handler="on_accounts_listbox_row_activated" object="CcOnlineAccountsPanel" swapped="yes" />
+                        <style>
+                          <class name="boxed-list" />
+                        </style>
+                        <accessibility>
+                          <relation name="labelled-by">accounts_frame</relation>
+                        </accessibility>
                       </object>
                     </child>
+                  </object>
+                </child>
 
+                <child>
+                  <object class="AdwPreferencesGroup">
+                    <property name="title" translatable="yes">Connect an Account</property>
                     <child>
-                      <object class="AdwPreferencesGroup">
-                        <property name="title" translatable="yes">Connect an Account</property>
-                        <child>
-                          <object class="GtkListBox" id="providers_listbox">
-                            <property name="selection_mode">none</property>
-                            <signal name="row-activated" handler="on_provider_row_activated_cb" object="CcOnlineAccountsPanel" swapped="yes" />
-                            <style>
-                              <class name="boxed-list" />
-                            </style>
-                          </object>
-                        </child>
+                      <object class="GtkListBox" id="providers_listbox">
+                        <property name="selection_mode">none</property>
+                        <signal name="row-activated" handler="on_provider_row_activated_cb" object="CcOnlineAccountsPanel" swapped="yes" />
+                        <style>
+                          <class name="boxed-list" />
+                        </style>
                       </object>
                     </child>
                   </object>
diff --git a/panels/online-accounts/meson.build b/panels/online-accounts/meson.build
index 06c3a05344ad5351221eba7adc997a4a4d3504e5..6795660698c976a68b057b9ec05ee5fb8dcf2e2f 100644
--- a/panels/online-accounts/meson.build
+++ b/panels/online-accounts/meson.build
@@ -29,6 +29,7 @@ sources += gnome.compile_resources(
 
 deps = common_deps + [
   goa_dep,
+  dependency('goa-backend-1.0', version: goa_req_version),
 ]
 
 panels_libs += static_library(
@@ -39,32 +40,4 @@ panels_libs += static_library(
   c_args: cflags
 )
 
-goa_helper_deps = [
-  dependency('goa-backend-1.0', version: goa_req_version),
-]
-
-goa_helper_cflags = cflags + [
-  '-DGNOMELOCALEDIR="@0@"'.format(control_center_localedir),
-]
-
-gtk_x11_dep = dependency('gtk+-x11-3.0', required: false)
-if gtk_x11_dep.found()
-  goa_helper_cflags += ['-DHAVE_GTK_X11']
-endif
-
-gtk_wayland_dep = dependency('gtk+-wayland-3.0', required: false)
-if gtk_wayland_dep.found()
-  goa_helper_cflags += ['-DHAVE_GTK_WAYLAND']
-endif
-
-executable(
-  'gnome-control-center-goa-helper',
-  'gnome-control-center-goa-helper.c',
-  include_directories: [ top_inc ],
-  dependencies: goa_helper_deps,
-  c_args: goa_helper_cflags,
-  install: true,
-  install_dir: control_center_libexecdir,
-)
-
 subdir('icons')
