#
# SPDX-FileCopyrightText: Â© 2020-2024 Serpent OS Developers
#
# SPDX-License-Identifier: MPL-2.0
#
name        : golang
version     : 1.23.3
release     : 10
homepage    : https://go.dev
upstreams   :
    - https://go.dev/dl/go1.23.3.linux-amd64.tar.gz : a0afb9744c00648bafb1b90b4aba5bdb86f424f02f9275399ce0c20b93a2c3a8
summary     : The Go programming language
description : |
    Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.
license     : BSD-3-Clause
builddeps   :
    #- binary(ar) # checkdep
    - binary(bash)
    - binary(go)
packages    :
    - "%(name)":
        paths:
            - /usr/lib/*.a
environment : |
    export GOROOT="%(libdir)/%(name)"
    export GOROOT_BOOTSTRAP="%(libdir)/%(name)"

    # Should this be set by boulder automatically?
    export XDG_CACHE_HOME="%(workdir)/.cache"
setup       : |
    %patch %(pkgdir)/stateless/x509-certificate-path.patch
build       : |
    # some tests just fail (some need networking)
    cd src && ./make.bash -v
# TODO: Properly filter unwanted content to achieve a clean package.
install     : |
    GOROOT=${PWD} PATH=${PWD}/bin:${PATH} go install -buildmode=shared std
    rm -rf .cache go
    # Testdata searches for /libexec/ld-elf.so.1.
    # This is just data fed into tests, but boulder scans it regardless.
    find -type d -name testdata -exec rm -rf {} +

    # install the tooling
    %install_exe bin/gofmt %(installroot)%(libdir)/%(name)/bin/gofmt
    %install_exe bin/go %(installroot)%(libdir)/%(name)/bin/go

    # relative symlinks are nice for /proc/self/exe
    %install_dir %(installroot)%(bindir)
    ln -srvf %(installroot)%(libdir)/%(name)/bin/gofmt %(installroot)%(bindir)/
    ln -srvf %(installroot)%(libdir)/%(name)/bin/go %(installroot)%(bindir)/

    # needed assets
    find -mindepth 1 -maxdepth 1 -type d -not -name bin -exec cp -a {} %(installroot)/%(libdir)/%(name) \;

    # Ensure that the present toolchain version is always used for building other go recipes
    %install_file %(pkgdir)/go.env %(installroot)%(libdir)/%(name)/go.env

    # ensure go.env is visible in build
    cat %(installroot)%(libdir)/%(name)/go.env

    # Ensure that relevant env vars are set in user sessions
    %install_dir %(installroot)%(vendordir)/etc/profile.d
    # GOROOT needs to be set or bad things will happen, because make.bash uses -trimpath
    echo 'export GOROOT=%(libdir)/%(name)' >> %(installroot)%(vendordir)/etc/profile.d/golang-env.sh
    cat %(installroot)%(vendordir)/etc/profile.d/golang-env.sh
# check      : |
#     cd src && ./run.bash -v -v -v -k
