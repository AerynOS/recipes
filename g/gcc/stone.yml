#
# SPDX-FileCopyrightText: Â© 2020-2024 Serpent OS Developers
#
# SPDX-License-Identifier: MPL-2.0
#
name        : gcc
version     : 13.2.0
release     : 3
summary     : GNU C++ standard library and compiler
license     : GPL-3.0-or-later
homepage    : https://gcc.gnu.org/
description : |
    GNU C++ standard library and compiler
upstreams   :
    - https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.xz: e275e76442a6067341a27f04c5c6b83d8613144004c0413528863dc6b5c743da
    - https://libisl.sourceforge.io/isl-0.24.tar.xz:
        hash: 043105cc544f416b48736fff8caf077fb0663a717d06b1113f16e391ac99ebad
        stripdirs: 1
        unpackdir: "%(name)-%(version)/isl/"
builddeps   :
    - binary(bison)
    - binary(flex)
    - binary(m4)
    - binary(makeinfo)
    - binary(python3)
    - gcc-32bit
    - gcc-32bit-devel
    - glibc-32bit
    - glibc-32bit-devel
    - mpc-devel
    - pkgconfig(gmp)
    - pkgconfig(libxcrypt)
    - pkgconfig(libzstd)
    - pkgconfig(mpfr)
    - pkgconfig(zlib)
toolchain   : gnu
tuning      :
    - fortify: false
    - harden: false
    - nosemantic
    - optimize: speed
    - symbolic
setup       : |
    %patch %(pkgdir)/perf/increase-vectorize-cost-model-to-cheap.patch
    %patch %(pkgdir)/perf/use-highest-optimize-value.patch
    %patch %(pkgdir)/serpent/0001-Use-modern-linker-locations-for-Serpent-OS.patch
    %patch %(pkgdir)/serpent/0001-Install-libraries-into-lib-rather-than-lib64.patch

    mkdir build && cd build
    ../configure %(options_configure) \
        --disable-libmpx \
        --disable-libssp \
        --disable-libunwind-exceptions \
        --disable-libstdcxx-pch \
        --disable-vtable-verify \
        --enable-__cxa_atexit \
        --enable-checking=release \
        --enable-clocale=gnu \
        --enable-gnu-indirect-function \
        --enable-gnu-unique-object \
        --enable-initfini-array \
        --enable-languages=c,c++,lto \
        --enable-linker-build-id \
        --enable-linux-futex \
        --enable-lto \
        --enable-multilib \
        --enable-plugin \
        --enable-shared \
        --enable-threads=posix \
        --with-arch=%(march) \
        --with-arch_32=%(march) \
        --with-build-config=bootstrap-lto \
        --with-gcc-major-version-only \
        --with-isl \
        --with-linker-hash-style=gnu \
        --with-multilib-list=m32,m64 \
        --with-system-zlib \
        --with-tune=%(mtune) \
        --with-tune_32=%(mtune)
build       : |
    %make -C build profiledbootstrap
install     : |
    %make_install -C build

    # bfd needs to be able to find the LTO plugin
    major_version=$(echo %(version) | cut -d. -f1)
    %install_dir %(installroot)/%(libdir)/bfd-plugins
    ln -sf %(libdir)/gcc/gcc/%(build_platform)/${major_version}/liblto_plugin.so %(installroot)/%(libdir)/bfd-plugins/liblto_plugin.so

    # gdb needs to autoload some files, maybe lldb piggy backs off this?
    %install_dir %(installroot)/%(datadir)/gdb/auto-load/%(libdir)
    %install_dir %(installroot)/%(datadir)/gdb/auto-load/%(libdir)32
    mv %(installroot)/%(libdir)/libstdc++.so.*-gdb.py %(installroot)/%(datadir)/gdb/auto-load/%(libdir)/.
    mv %(installroot)/%(libdir)32/libstdc++.so.*-gdb.py %(installroot)/%(datadir)/gdb/auto-load/%(libdir)32/.

    # not allowed to install these =)
    rm %(installroot)%(datadir)/info/dir -v