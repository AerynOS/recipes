From 830f5cb4784a2e584bbfadeabe93410f0005205c Mon Sep 17 00:00:00 2001
From: Fabian Vogt <fabian@ritter-vogt.de>
Date: Fri, 8 Mar 2024 22:26:27 +0100
Subject: [PATCH] Use KIO::rmdir for unlinking directories

Unlike KIO::del, this fails if the directory is not empty.

BUG: 482902
---
 kiofusevfs.cpp        |  8 +++++---
 tests/fileopstest.cpp | 22 ++++++++++++++++++++++
 2 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/kiofusevfs.cpp b/kiofusevfs.cpp
index a9d5a95..10cddfe 100644
--- a/kiofusevfs.cpp
+++ b/kiofusevfs.cpp
@@ -873,8 +873,10 @@ void KIOFuseVFS::unlinkHelper(fuse_req_t req, fuse_ino_t parent, const char *nam
 		}
 	}
 
-	auto *job = KIO::del(that->remoteUrl(node));
-	that->connect(job, &KIO::SimpleJob::finished, that, [=] {
+	auto remoteUrl = that->remoteUrl(node);
+	// Use KIO::rmdir to ensure that the directory is really empty (kde#482902)
+	auto *job = isDirectory ? static_cast<KIO::Job*>(KIO::rmdir(remoteUrl)) : KIO::del(remoteUrl);
+	that->connect(job, &KIO::Job::finished, that, [=] {
 		if(job->error())
 		{
 			fuse_reply_err(req, kioErrorToFuseError(job->error()));
@@ -2473,7 +2475,7 @@ int KIOFuseVFS::kioErrorToFuseError(const int kioError) {
 		case KIO::ERR_CANNOT_STAT                  : return EIO;
 		case KIO::ERR_CANNOT_CLOSEDIR              : return EIO;
 		case KIO::ERR_CANNOT_MKDIR                 : return EIO;
-		case KIO::ERR_CANNOT_RMDIR                 : return EIO;
+		case KIO::ERR_CANNOT_RMDIR                 : return ENOTEMPTY;
 		case KIO::ERR_CANNOT_RESUME                : return ECONNABORTED;
 		case KIO::ERR_CANNOT_RENAME                : return EIO;
 		case KIO::ERR_CANNOT_CHMOD                 : return EIO;
diff --git a/tests/fileopstest.cpp b/tests/fileopstest.cpp
index 1219f5d..4ef6d02 100644
--- a/tests/fileopstest.cpp
+++ b/tests/fileopstest.cpp
@@ -51,6 +51,7 @@ private Q_SLOTS:
 	void testTypeRefresh();
 	void testDirSymlink();
 	void testSymlinkRewrite();
+	void testNonemptyRmdir();
 #ifdef WASTE_DISK_SPACE
 	void testReadWrite4GBFile();
 #endif // WASTE_DISK_SPACE
@@ -991,6 +992,27 @@ void FileOpsTest::testSymlinkRewrite()
 	         QDir(reply).filePath(QStringLiteral("somewhere")));
 }
 
+void FileOpsTest::testNonemptyRmdir()
+{
+	QTemporaryDir localTmpDir;
+	QVERIFY(localTmpDir.isValid());
+	QDir localDir(localTmpDir.path());
+
+	// Mount the temporary dir
+	QString reply = m_kiofuse_iface.mountUrl(QStringLiteral("file://%1").arg(localDir.path())).value();
+	QVERIFY(!reply.isEmpty());
+
+	QDir mirrorDir(reply);
+	QVERIFY(mirrorDir.exists());
+
+	// Create a directory structure inside
+	localDir.mkpath(QStringLiteral("outer/inner"));
+
+	// Attempt to rmdir "outer" while "inner" exists inside.
+	QCOMPARE(rmdir(qPrintable(mirrorDir.filePath(QStringLiteral("outer")))), -1);
+	QCOMPARE(errno, ENOTEMPTY);
+}
+
 #ifdef WASTE_DISK_SPACE
 void FileOpsTest::testReadWrite4GBFile()
 {
-- 
GitLab

