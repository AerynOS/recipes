name        : linux-desktop
version     : 6.11.8
release     : 53
homepage    : https://kernel.org/
upstreams   :
    - https://www.kernel.org/pub/linux/kernel/v6.x/linux-6.11.8.tar.xz : aee8a844fe152420bece70ffae8525b9b23089aa4da31fa32f30e1859bf93c3d
summary     : The Linux Kernel for desktop systems
description : |
    The Linux Kernel for desktop systems

    This package provides the Linux Kernel for desktop systems. It is built with
    the LLVM compiler and the LLD linker, and is optimized for desktop systems.
license     :
    - GPL-2.0-only
builddeps   :
    - binary(bc)
    - binary(bison)
    - binary(dbus-broker)
    - binary(dracut)
    - binary(flex)
    - binary(gzip)
    - binary(kmod)
    - binary(less)
    - binary(m4)
    - binary(perl)
    - binary(python3)
    - binary(which)
    - pkgconfig(gmp)
    - pkgconfig(libelf)
    - pkgconfig(libssl)
    - pkgconfig(libzstd)
    - pkgconfig(mpfr)
    - binary(grep)
    - gcc # libgcc_s.so.1 - needed until we get llvm-libgcc
    - intel-microcode
    - linux-firmware-amd
packages    :
    - "%(name)-devel":
        paths:
            - /usr/src
setup       : |
    extraVersion="-%(release).desktop"
    sed -e "s/EXTRAVERSION =.*/EXTRAVERSION = $extraVersion/" -i Makefile

    %install_file %(pkgdir)/config-x86_64 .config
    %patch %(pkgdir)/more-ISA-levels-and-uarches-for-kernel-6.8-rc4+.patch
    %make CC=clang ARCH=x86_64 LLVM=1 LLVM_IAS=1 WERROR=0 oldconfig || exit 1
build       : |
    # Do NOT use CONFIG_DEBUG_SECTION_MISMATCH as it is GCC specific
    %make VERBOSE=0 V=0 CC=clang ARCH=x86_64 LLVM=1 LLVM_IAS=1 WERROR=0
    %make -C tools/objtool VERBOSE=0 V=0 CC=clang ARCH=x86_64 LLVM=1 LLVM_IAS=1 WERROR=0
install     : |
    kernelVersion="%(version)-%(release).desktop"
    %install_exe arch/x86/boot/bzImage %(installroot)%(libdir)/kernel/$kernelVersion/vmlinuz

    %install_file .config %(installroot)%(libdir)/kernel/$kernelVersion/config
    %install_file System.map %(installroot)%(libdir)/kernel/$kernelVersion/System.map

    # Modules please
    %install_dir %(installroot)%(libdir)/modules/$kernelVersion
    %make CC=clang ARCH=x86_64 LLVM=1 WERROR=0 INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=%(installroot)/usr modules_install KERNELRELEASE="$kernelVersion" mod-fw= DEPMOD=/usr/bin/true
    /usr/sbin/depmod -b %(installroot)/usr ${kernelVersion} -a

    # Include early microcode
    dracut --strip --tmpdir /tmp -N -f \
        --kmoddir %(installroot)%(libdir)/modules/${kernelVersion} --kver $kernelVersion --add "dash bash systemd virtiofs" \
        --strip --hardlink --nomdadmconf --nolvmconf --add-drivers "qxl virtio-gpu" --zstd --early-microcode \
        %(installroot)%(libdir)/kernel/$kernelVersion/50-default.initrd

    # Temporary: Help with VMs
    ln -s $kernelVersion/50-default.initrd %(installroot)%(libdir)/kernel/current.desktop.initrd
    ln -s $kernelVersion/vmlinuz %(installroot)%(libdir)/kernel/current.desktop.kernel
    %install_file %(pkgdir)/boot.json %(installroot)%(libdir)/kernel/$kernelVersion/boot.json
    sed -e 's/@VERSION@/%(version)-%(release).desktop/g' -i %(installroot)%(libdir)/kernel/$kernelVersion/boot.json

    # Install kernel headers
    headerRoot="/usr/src/linux-headers-%(version)-%(release).desktop"
    dstDir="%(installroot)$headerRoot"
    %install_dir $dstDir

    # Copy core build files
    find . -type f \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o -name '*.sh' -o -name '*.pl' -o -name '*.lds' \) -exec cp --parents {} $dstDir \;

    # Copy headers and essential directories
    cp -a include scripts $dstDir/
    (find arch -name include -type d -print | xargs -n1 -i: find : -type f) | cpio -pd --preserve-modification-time $dstDir

    # Media driver headers
    for dir in "drivers/media/dvb-frontends" "drivers/media/tuners"; do
        find $dir -name "*.h" -exec cp --parents {} $dstDir \;
    done
    find drivers/media/platform -name "*.h" -exec cp --parents {} $dstDir \;

    # Clean unnecessary files
    find $dstDir -name "*.o" -o -name "*.lds" -delete

    # Copy build requirements
    %install_file Module.symvers System.map .config $dstDir/
    %install_exe tools/objtool/objtool $dstDir/tools/objtool/objtool

    # Set up module symlinks
    ln -svf build %(installroot)%(libdir)/modules/$kernelVersion/source
    ln -srvf $headerRoot %(installroot)%(libdir)/modules/$kernelVersion/build
