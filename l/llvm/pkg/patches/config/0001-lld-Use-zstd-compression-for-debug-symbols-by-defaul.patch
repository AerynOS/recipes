From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Reilly Brogan <reilly@reillybrogan.com>
Date: Thu, 12 Dec 2024 20:50:14 -0600
Subject: [PATCH] lld: Use zstd compression for debug symbols by default

This causes LLVM to always behave as though `--compress-debug-sections=zstd` is present.

It would be nice if llvm supported configuring this at build time like binutils does.

Origin: vendor
Forwarded: not-needed
Last-Update: 2025-03-29
---
 clang/include/clang/Driver/Options.td  | 4 ++--
 clang/tools/driver/cc1as_main.cpp      | 4 ++--
 lld/ELF/Config.h                       | 2 +-
 lld/ELF/Driver.cpp                     | 8 ++++----
 lld/ELF/Options.td                     | 2 +-
 lld/ELF/OutputSections.cpp             | 4 ++--
 llvm/tools/llvm-objcopy/ObjcopyOpts.td | 4 ++--
 7 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/clang/include/clang/Driver/Options.td b/clang/include/clang/Driver/Options.td
index 9309ceee5531..a7fb6a152da1 100644
--- a/clang/include/clang/Driver/Options.td
+++ b/clang/include/clang/Driver/Options.td
@@ -7350,9 +7350,9 @@ def dwarf_debug_flags : Separate<["-"], "dwarf-debug-flags">,
 def compress_debug_sections_EQ : Joined<["-", "--"], "compress-debug-sections=">,
     HelpText<"DWARF debug sections compression type">, Values<"none,zlib,zstd">,
     NormalizedValuesScope<"llvm::DebugCompressionType">, NormalizedValues<["None", "Zlib", "Zstd"]>,
-    MarshallingInfoEnum<CodeGenOpts<"CompressDebugSections">, "None">;
+    MarshallingInfoEnum<CodeGenOpts<"CompressDebugSections">, "Zstd">;
 def compress_debug_sections : Flag<["-", "--"], "compress-debug-sections">,
-  Alias<compress_debug_sections_EQ>, AliasArgs<["zlib"]>;
+  Alias<compress_debug_sections_EQ>, AliasArgs<["zstd"]>;
 def mno_exec_stack : Flag<["-"], "mnoexecstack">,
   HelpText<"Mark the file as not needing an executable stack">,
   MarshallingInfoFlag<CodeGenOpts<"NoExecStack">>;
diff --git a/clang/tools/driver/cc1as_main.cpp b/clang/tools/driver/cc1as_main.cpp
index 7fe97cc6e6ac..ab6e7999a01f 100644
--- a/clang/tools/driver/cc1as_main.cpp
+++ b/clang/tools/driver/cc1as_main.cpp
@@ -103,7 +103,7 @@ struct AssemblerInvocation {
   std::string DebugCompilationDir;
   llvm::SmallVector<std::pair<std::string, std::string>, 0> DebugPrefixMap;
   llvm::DebugCompressionType CompressDebugSections =
-      llvm::DebugCompressionType::None;
+      llvm::DebugCompressionType::Zstd;
   std::string MainFileName;
   std::string SplitDwarfOutput;
 
@@ -292,7 +292,7 @@ bool AssemblerInvocation::CreateFromArgs(AssemblerInvocation &Opts,
             .Case("none", llvm::DebugCompressionType::None)
             .Case("zlib", llvm::DebugCompressionType::Zlib)
             .Case("zstd", llvm::DebugCompressionType::Zstd)
-            .Default(llvm::DebugCompressionType::None);
+            .Default(llvm::DebugCompressionType::Zstd);
   }
 
   if (auto *DwarfFormatArg = Args.getLastArg(OPT_gdwarf64, OPT_gdwarf32))
diff --git a/lld/ELF/Config.h b/lld/ELF/Config.h
index ddf64a94eeab..721a2673423b 100644
--- a/lld/ELF/Config.h
+++ b/lld/ELF/Config.h
@@ -266,7 +266,7 @@ struct Config {
   CGProfileSortKind callGraphProfileSort;
   bool checkSections;
   bool checkDynamicRelocs;
-  std::optional<llvm::DebugCompressionType> compressDebugSections;
+  llvm::DebugCompressionType compressDebugSections = llvm::DebugCompressionType::Zstd;
   llvm::SmallVector<
       std::tuple<llvm::GlobPattern, llvm::DebugCompressionType, unsigned>, 0>
       compressSections;
diff --git a/lld/ELF/Driver.cpp b/lld/ELF/Driver.cpp
index bf1d2f03488d..412705bf0cba 100644
--- a/lld/ELF/Driver.cpp
+++ b/lld/ELF/Driver.cpp
@@ -1142,10 +1142,10 @@ static DebugCompressionType getCompressionType(Ctx &ctx, StringRef s,
                                                StringRef option) {
   DebugCompressionType type = StringSwitch<DebugCompressionType>(s)
                                   .Case("zlib", DebugCompressionType::Zlib)
-                                  .Case("zstd", DebugCompressionType::Zstd)
-                                  .Default(DebugCompressionType::None);
-  if (type == DebugCompressionType::None) {
-    if (s != "none")
+                                  .Case("none", DebugCompressionType::None)
+                                  .Default(DebugCompressionType::Zstd);
+  if (type == DebugCompressionType::Zstd) {
+    if (s != "zstd")
       ErrAlways(ctx) << "unknown " << option << " value: " << s;
   } else if (const char *reason = compression::getReasonIfUnsupported(
                  compression::formatFor(type))) {
diff --git a/lld/ELF/Options.td b/lld/ELF/Options.td
index b7300ba0efa0..cf98726fa005 100644
--- a/lld/ELF/Options.td
+++ b/lld/ELF/Options.td
@@ -64,7 +64,7 @@ defm check_sections: B<"check-sections",
     "Do not check section addresses for overlaps">;
 
 defm compress_debug_sections:
-  Eq<"compress-debug-sections", "Compress DWARF debug sections">,
+  Eq<"compress-debug-sections", "Compress DWARF debug sections (default: zstd)">,
   MetaVarName<"[none,zlib,zstd]">;
 
 defm compress_sections: EEq<"compress-sections",
diff --git a/lld/ELF/OutputSections.cpp b/lld/ELF/OutputSections.cpp
index a2da5543d586..d9b265299cfd 100644
--- a/lld/ELF/OutputSections.cpp
+++ b/lld/ELF/OutputSections.cpp
@@ -368,9 +368,9 @@ template <class ELFT> void OutputSection::maybeCompress(Ctx &ctx) {
   DebugCompressionType ctype = DebugCompressionType::None;
   size_t compressedSize = sizeof(Elf_Chdr);
   unsigned level = 0; // default compression level
-  if (!(flags & SHF_ALLOC) && ctx.arg.compressDebugSections &&
+  if (!(flags & SHF_ALLOC) &&
       name.starts_with(".debug_"))
-    ctype = *ctx.arg.compressDebugSections;
+    ctype = ctx.arg.compressDebugSections;
   for (auto &[glob, t, l] : ctx.arg.compressSections)
     if (glob.match(name))
       std::tie(ctype, level) = {t, l};
diff --git a/llvm/tools/llvm-objcopy/ObjcopyOpts.td b/llvm/tools/llvm-objcopy/ObjcopyOpts.td
index fbc6a59d9461..ed42239f8b19 100644
--- a/llvm/tools/llvm-objcopy/ObjcopyOpts.td
+++ b/llvm/tools/llvm-objcopy/ObjcopyOpts.td
@@ -35,9 +35,9 @@ def compress_debug_sections
     : Joined<["--"], "compress-debug-sections=">,
       MetaVarName<"format">,
       HelpText<"Compress DWARF debug sections using specified format. Supported "
-               "formats: zlib, zstd. Select zlib if <format> is omitted">;
+               "formats: zlib, zstd. Select zstd if <format> is omitted.">;
 def : Flag<["--"], "compress-debug-sections">, Alias<compress_debug_sections>,
-      AliasArgs<["zlib"]>;
+      AliasArgs<["zstd"]>;
 def decompress_debug_sections : Flag<["--"], "decompress-debug-sections">,
                                 HelpText<"Decompress DWARF debug sections">;
 defm compress_sections
