#
# SPDX-FileCopyrightText: Â© 2020-2024 Serpent OS Developers
#
# SPDX-License-Identifier: MPL-2.0
#
name        : llvm
version     : 20.1.8
release     : 33
summary     : Low Level Virtual Machine
license     :
    - Apache-2.0 WITH LLVM-exception
    - NCSA
homepage    : https://www.llvm.org
description : |
    Low Level Virtual Machine
upstreams   :
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/llvm-project-20.1.8.src.tar.xz : 6898f963c8e938981e6c4a302e83ec5beb4630147c7311183cf61069af16333d
builddeps   :
    - binary(perl)
    - binary(python3)
    - binary(sed)
    - pkgconfig(hwloc)
    - pkgconfig(libedit)
    - pkgconfig(mimalloc)
    - pkgconfig32(libffi)
    - pkgconfig32(libxcrypt)
    - pkgconfig32(libxml-2.0)
    - pkgconfig32(libzstd)
    - pkgconfig32(zlib)
    - python(myst-parser)
    - binutils-devel
    - clang-32bit
    - gcc-32bit
    - libatomic
    - libatomic-32bit
    - libcxx-devel-static
    - mimalloc-static # TODO: Figure out if we can actually split mimalloc-static, or if it needs to go back in.
tuning      :
    - fortify: false
    - frame-pointer: false
    - harden: false
    - icf: all
    - lto: false # LTO needs to be set in LLVM cmake flags so it adds -fno-lto where needed
    - nosemantic
    - optimize: speed
    - symbolic
environment : |
    if [[ %(target_triple) = i686* ]]; then
        _TARGET_ARCH=x86
        _IS_64BIT_BUILD="OFF"

        # We really only care about 32bit LLVM in the context of Mesa which doesn't need anything besides libLLVM
        # Additionally it's possible that we really only need it to support the AMDGPU target but that is untested.
        # 2025-05: Add SPIRV just in case that's ever needed (seems possible in a graphics context)
        # TODO: Test that. Low priority since the 32bit build is already relatively short
        _BUILD_TARGETS="AMDGPU;SPIRV;X86"
        _PROJECTS="llvm"
        _RUNTIMES="libcxx;libcxxabi;libunwind"

    else
        _TARGET_ARCH=x86_64
        _IS_64BIT_BUILD="ON"

        # Full-fat (in the milk sense) build suitable for cross-compilation
        _BUILD_TARGETS="AArch64;AMDGPU;ARM;BPF;RISCV;SPIRV;WebAssembly;X86"
        _PROJECTS="bolt;clang;clang-tools-extra;flang;lld;llvm;mlir;polly"
        _RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind;offload;openmp"
    fi

    if [[ " ${PATH[*]} " =~ "ccache" ]]; then
        EXTRA_LLVM_FLAGS="-DLLVM_CCACHE_BUILD=ON"
    fi

    function apply_llvm_patches() {
        # Build-related patches, achieving adjustments/fixes to the build that cannot be done via cmake flags
        %patch %(pkgdir)/patches/build/0001-Build-lld-libraries-shared.patch
        %patch %(pkgdir)/patches/build/0001-Build-polly-libraries-shared.patch
        %patch %(pkgdir)/patches/build/0001-Emit-relocations-for-BOLT.patch
        %patch %(pkgdir)/patches/build/0003-PATCH-clang-Don-t-install-static-libraries.patch
        %patch %(pkgdir)/patches/build/0001-downstream-Suppress-runpath-in-openmp.patch
        %patch %(pkgdir)/patches/build/0001-compiler-rt-Force-libc.patch
        %patch %(pkgdir)/patches/build/0001-bolt-Set-version-string.patch
        %patch %(pkgdir)/patches/build/0001-openmp-Don-t-install-static-libarcher.patch
        %patch %(pkgdir)/patches/build/0001-flang-Add-install-targets-for-mod-header.patch
        %patch %(pkgdir)/patches/build/0001-polly-Create-targets-for-headers-cmake.patch
        %patch %(pkgdir)/patches/build/0001-lld-Create-target-for-header.patch

        # Runtime config changes. These often duplicate settings set by our CFLAGS/LDFLAGS and are intended as sane
        # defaults when a build either doesn't respect our flags or when a user is building a project outside of
        # our build system
        %patch %(pkgdir)/patches/config/0001-Make-gnuhash-the-default-when-not-specified.patch
        %patch %(pkgdir)/patches/config/0001-lld-Use-zstd-compression-for-debug-symbols-by-defaul.patch
        %patch %(pkgdir)/patches/config/0001-lld-Always-enable-build-id-and-use-20-byte-hashes.patch

        # Aeryn-specific patches
        %patch %(pkgdir)/patches/aerynos/0001-Support-serpent-aeryn-as-a-distro.patch
        %patch %(pkgdir)/patches/aerynos/0001-Use-correct-Serpent-OS-multilib-paths-for-ld.patch
        %patch %(pkgdir)/patches/aerynos/0001-Update-binutils-version-to-match-Serpent-OS.patch
        %patch %(pkgdir)/patches/aerynos/0001-clang-lib-Ignore-Werror-if-CLANG_IGNORE_WERROR-is-se.patch

        # Performance-related patches
        %patch %(pkgdir)/patches/perf/0001-Reduce-GCC-startup-searches.patch
        %patch %(pkgdir)/patches/perf/0001-Use-mimalloc-for-clang-lld-llvm.patch

        ## Upstream backports
        # RISC-V generic target support:
        %patch %(pkgdir)/patches/upstream/0001-RISCV-Add-a-generic-OOO-CPU.patch
        %patch %(pkgdir)/patches/upstream/0002-Adjust-latency-and-remove-all-stats.patch
        %patch %(pkgdir)/patches/upstream/0003-Adjust-branch-mul-div-units.patch
        %patch %(pkgdir)/patches/upstream/0004-Add-more-comments-and-adjust-Zfh.patch
        %patch %(pkgdir)/patches/upstream/0005-Remove-vector-and-address-comments.patch
        %patch %(pkgdir)/patches/upstream/0006-Fix-errors-after-rebasing-and-add-a-release-note.patch
        # Fixes for Flang man page generation
        %patch %(pkgdir)/patches/upstream/0001-flang-NFC-Create-required-Source-dir-for-flang-doc.-.patch
        %patch %(pkgdir)/patches/upstream/0002-Flang-Add-Sphinx-man-page-and-html-support-for-Flang.patch
        # Fixes a build failure with Firefox 142.0
        %patch %(pkgdir)/patches/upstream/0001-libc-Fix-padding-calculation-for-function-reference-.patch
    }

    # 2025-03-25: Add LIBCXX_TYPEINFO_COMPARISON_IMPLEMENTATION=2 for https://bugs.kde.org/show_bug.cgi?id=479679
    #  See also https://github.com/llvm/llvm-project/issues/36746
    function cmake_llvm_configure() {
        %cmake \
            -DCMAKE_SKIP_INSTALL_RPATH=ON \
            -DBOLT_PACKAGE_VERSION=%(version) \
            -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
            -DCLANG_DEFAULT_LINKER=lld \
            -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
            -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
            -DCLANG_DEFAULT_RTLIB=compiler-rt \
            -DCLANG_DEFAULT_UNWINDLIB=libunwind \
            -DCLANG_LINK_CLANG_DYLIB=ON \
            -DCLANG_PLUGIN_SUPPORT=ON \
            -DCLANG_REPOSITORY_STRING="AerynOS" \
            -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
            -DCOMPILER_RT_USE_LIBCXX=ON \
            -DENABLE_LINKER_BUILD_ID=ON \
            -DLIBCXX_ENABLE_ASSERTIONS=OFF \
            -DLIBCXX_ENABLE_SHARED=ON \
            -DLIBCXX_ENABLE_STATIC=ON \
            -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
            -DLIBCXX_HAS_ATOMIC_LIB=ON \
            -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=ON \
            -DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=ON \
            -DLIBCXX_TYPEINFO_COMPARISON_IMPLEMENTATION=2 \
            -DLIBCXX_USE_COMPILER_RT=ON \
            -DLIBCXXABI_ENABLE_SHARED=OFF \
            -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
            -DLIBCXXABI_USE_COMPILER_RT=ON \
            -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
            -DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=OFF \
            -DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_STATIC_LIBRARY=OFF \
            -DLIBOMP_INSTALL_ALIASES=OFF \
            -DLIBOMP_USE_HWLOC=ON \
            -DLIBUNWIND_ENABLE_SHARED=ON \
            -DLIBUNWIND_ENABLE_STATIC=ON \
            -DLIBUNWIND_INSTALL_HEADERS=ON \
            -DLIBUNWIND_INSTALL_LIBRARY=ON \
            -DLIBUNWIND_INSTALL_LIBRARY=ON \
            -DLIBUNWIND_USE_COMPILER_RT=ON \
            -DLLVM_APPEND_VC_REV=OFF \
            -DLLVM_BINUTILS_INCDIR=/usr/include \
            -DLLVM_BUILD_DOCS=$_IS_64BIT_BUILD \
            -DLLVM_BUILD_LLVM_DYLIB=ON \
            -DLLVM_BUILD_TOOLS=ON \
            -DLLVM_DEFAULT_TARGET_TRIPLE=%(build_platform) \
            -DLLVM_DYLIB_COMPONENTS="all" \
            -DLLVM_ENABLE_DOXYGEN=OFF \
            -DLLVM_ENABLE_FFI=ON \
            -DLLVM_ENABLE_LIBCXX=ON \
            -DLLVM_ENABLE_LIBXML2=ON \
            -DLLVM_ENABLE_LTO=Thin \
            -DLLVM_ENABLE_MIMALLOC=$_IS_64BIT_BUILD \
            -DLLVM_ENABLE_MODULES=OFF \
            -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
            -DLLVM_ENABLE_PLUGINS=ON \
            -DLLVM_ENABLE_PROJECTS=$_PROJECTS \
            -DLLVM_ENABLE_RTTI=ON \
            -DLLVM_ENABLE_RUNTIMES=$_RUNTIMES \
            -DLLVM_ENABLE_SPHINX=$_IS_64BIT_BUILD \
            -DLLVM_ENABLE_ZLIB=ON \
            -DLLVM_ENABLE_ZSTD=ON \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_DOCS=$_IS_64BIT_BUILD \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_UTILS=$_IS_64BIT_BUILD \
            -DLLVM_INSTALL_UTILS=$_IS_64BIT_BUILD \
            -DLLVM_LIBDIR_SUFFIX=%(libsuffix) \
            -DLLVM_LINK_LLVM_DYLIB=ON \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DLLVM_POLLY_LINK_INTO_TOOLS=OFF \
            -DLLVM_TARGET_ARCH=$_TARGET_ARCH \
            -DLLVM_TARGETS_TO_BUILD=$_BUILD_TARGETS \
            -DLLVM_TOOL_OPENMP_BUILD=ON \
            -DLLVM_USE_PERF=$_IS_64BIT_BUILD \
            -DLLVM_USE_SANITIZER=OFF \
            -DMLIR_BUILD_MLIR_C_DYLIB=ON \
            -DMLIR_INSTALL_AGGREGATE_OBJECTS=OFF \
            -DMLIR_LINK_MLIR_DYLIB=ON \
            -DOPENMP_INSTALL_LIBDIR="%(libdir)" \
            -DSPHINX_OUTPUT_MAN=$_IS_64BIT_BUILD \
            -DSPHINX_OUTPUT_HTML=OFF \
            $EXTRA_LLVM_FLAGS \
            "$@"
    }

    # "Inspired by"/"Gratuitously copied from" Gentoo, use LLVM_DISTRIBUTION_COMPONENTS to avoid installing static libs
    # and other unnecessary things. This works by extracting the target list from ninja and
    # filtering it to only have the things we really need. This way when cmake target files
    # are generated it results in the components we didn't include not being added to the
    # searched for objects.
    ## NOTE: New versions of LLVM should be built without this in order to see what's been
    ## added/removed and this list updated correspondingly.
    function get_distribution_components() {
        # This generates a lot of output that we don't need to see
        set +x
        local target
        ninja -C "%(builddir)" -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
            case $target in
                distribution)
                    continue
                    ;;

                ### LLVM
                llvm-libraries)
                    continue
                    ;;
                # shared libraries
                LLVM|LLVMgold|LTO|Remarks)
                    ;;
                # used by *-tblgen utilities (including lldb-tblgen)
                LLVMTableGen|LLVMSupport|LLVMDemangle)
                    ;;
                # used by lldb
                LLVMDebuginfod)
                    ;;
                # Devel
                llvm-headers|cmake-exports)
                    ;;
                # Bins
                FileCheck|UnicodeNameMappingGenerator|bugpoint|dsymutil|llc|lli|obj2yaml|opt|opt-viewer|reduce-chunk-list|sancov|sanstats|split-file|verify-uselistorder|yaml2obj)
                    ;;
                # Devel bins
                count|lli-child-target|not|yaml-bench)
                    ;;
                # Various binaries (everything we don't want has already been excluded)
                llvm-*)
                    ;;

                ### Clang
                clang-libraries)
                    continue
                    ;;
                clang-tidy-headers)
                    continue
                    ;;
                # Libs
                libclang|clang-cpp)
                    ;;
                clang|clangd|clang-*|bash-autocomplete)
                    ;;
                # Other clang tools
                amdgpu-arch|c-index-test|diagtool|find-all-symbols|hmaptool|modularize|nvptx-arch|pp-trace|scan-view|scan-build*)
                    ;;
                clang*|findAllSymbols)
                    continue
                    ;;

                ### LLD
                # Shared libraries
                lld*)
                    ;;
                # Devel
                lld-headers|lld-cmake-exports)
                    ;;

                ### Polly
                # Libs
                Polly|PollyISL|LLVMPolly)
                    ;;
                # Devel
                polly-headers|polly-cmake-exports)
                    ;;

                ### BOLT
                bolt)
                    ;;

                ### MLIR
                mlir-libraries)
                    continue
                    ;;
                # Shared libs
                MLIR|MLIR-C|MLIRExecutionEngineShared)
                    ;;
                # Target libs
                mlir_*)
                    ;;
                # MLIR tools
                mlir-*|tblgen-lsp-server|tblgen-to-irdl)
                    ;;
                # Devel
                mlir-headers|mlir-cmake-exports)
                    ;;
                # MLIR dependencies
                MLIRSparseTensorRuntime|MLIRSparseTensorEnums)
                    ;;

                ### Flang
                # Flang itself
                flang)
                    ;;
                # Supporting tools
                bbc|tco|f18-parse-demo|fir-*)
                    ;;
                # Flang-rt libraries
                FortranRuntime|FortranDecimal)
                    ;;
                # Fortran build files
                flang-binding|flang-mod)
                    ;;

                ### built-ins, Runtimes
                builtins|runtimes)
                    ;;

                ### Deny everything else
                *)
                    continue
                    ;;
            esac
            echo $target
        done
        set -x
    }
profiles    :
    - emul32:
        setup:   |
            apply_llvm_patches

            cmake_llvm_configure -S llvm \
                -DLLVM_USE_LINKER="lld"

            distribution_components=$(get_distribution_components | paste -sd\;)
            test -n "$distribution_components"
            cmake_llvm_configure -S llvm \
                -DLLVM_USE_LINKER="lld" \
                -DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components"
        build:   |
            %ccache_zero
            %cmake_build --target distribution
            %ccache_stats
        install: |
            DESTDIR="%(installroot)" cmake --build "%(builddir)" --verbose --target install-distribution

            ### LLVM (begin)
            # Force this to 32-bit specific configuration
            mv %(installroot)%(bindir)/llvm-config %(installroot)%(bindir)/llvm-config32
            mv %(installroot)%(includedir)/llvm/Config/llvm-config.h %(installroot)%(includedir)/llvm/Config/llvm-config32.h

            # Make sure that the .defs files are arch-dependent
            mkdir %(installroot)/usr/include/llvm/Config/32
            mv %(installroot)/usr/include/llvm/Config/*.def %(installroot)/usr/include/llvm/Config/32/
            # LLVM (end)

            ### libcxx/libunwind (begin)
            # Origin: https://raw.githubusercontent.com/kraj/meta-clang/master/recipes-devtools/clang/clang/libunwind.pc.in
            %install_dir %(installroot)%(libdir)/pkgconfig
            sed -e 's@\@LIBDIR\@@%(libdir)@g' -e 's/@VERSION@/%(version)/g' %(pkgdir)/libunwind.pc.in > %(installroot)%(libdir)/pkgconfig/libunwind.pc
            # libcxx/libunwind (end)
    - x86_64:
        setup:   |
            apply_llvm_patches

            # cmake_llvm_configure -S llvm \
            #     -C clang/cmake/caches/PGO.cmake \
            #     -DPGO_INSTRUMENT_LTO=Thin \
            #     -B pgo-training

            # cmake_build -C pgo-training stage2-instrumented-generate-profdata

            # find pgo-training -name "clang.profdata" -exec mv {} %(workdir) \;

            cmake_llvm_configure llvm

            distribution_components=$(get_distribution_components | paste -sd\;)
            test -n "$distribution_components"
            cmake_llvm_configure llvm \
                -DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components"
        build:   |
            %ccache_zero
            %cmake_build --target distribution

            # Generate man pages (this list will need to be updated on every major LLVM update)
            %cmake_build --target docs-clang-man docs-clang-tools-man docs-dsymutil-man docs-flang-man docs-llvm-dwarfdump-man docs-llvm-man docs-polly-man
            %ccache_stats
        install: |
            DESTDIR="%(installroot)" cmake --build "%(builddir)" --verbose --target install-distribution

            # Install man pages
            DESTDIR="%(installroot)" cmake --build "%(builddir)" --verbose --target install-docs-clang-man install-docs-clang-tools-man install-docs-dsymutil-man install-docs-flang-man install-docs-llvm-dwarfdump-man install-docs-llvm-man install-docs-polly-man

            # Unused man pages (or used elsewhere like the lldb-tblgen one)
            rm -fv %(installroot)%(mandir)/man1/lit* \
                   %(installroot)%(mandir)/man1/lldb-tblgen*

            # TODO: Restore the bolt'd build

            # # Major clang version
            # major_version=$(echo %(version) | cut -d. -f1)
            # export PATH="%(installroot)/usr/bin:${PATH}"
            # export LD_LIBRARY_PATH="%(installroot)/%(libdir):${LD_LIBRARY_PATH}"

            # for i in /usr/bin/clang-${major_version} /usr/lib/liblldELF.so.18.1 /usr/lib/liblldCommon.so.18.1 /usr/lib/LLVMPolly.so /usr/lib/libPollyISL.so /usr/lib/libclang-cpp.so.18.1 /usr/lib/libclang.so.%(version) /usr/lib/libLLVM.so.18.1 /usr/lib/libLTO.so.18.1; do
            #   bolt_instr %(installroot)/$i
            # done

            # cmake -G Ninja ${llvmopts} -B bolt-clang -S runtimes \
            #   -DCMAKE_C_COMPILER="%(installroot)/usr/bin/clang" \
            #   -DCMAKE_CXX_COMPILER="%(installroot)/usr/bin/clang++" \
            #   -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi;libunwind' \
            #   -DLLVM_USE_LINKER="%(installroot)/usr/bin/ld.lld" \
            #   -DLLVM_ENABLE_LTO=Full

            # cmake_build -C bolt-clang

            # for i in /usr/bin/clang-${major_version} /usr/lib/liblldELF.so.18.1 /usr/lib/liblldCommon.so.18.1 /usr/lib/LLVMPolly.so /usr/lib/libPollyISL.so /usr/lib/libclang-cpp.so.18.1 /usr/lib/libclang.so.%(version) /usr/lib/libLLVM.so.18.1 /usr/lib/libLTO.so.18.1; do
            #   bolt_merge %(installroot)/$i
            #   bolt_opt %(installroot)/$i
            # done

            ### LLVM (begin)
            %install_dir %(installroot)/%(libdir)/bfd-plugins
            ln -srf %(installroot)/%(libdir)/LLVMgold.so %(installroot)/%(libdir)/bfd-plugins/LLVMgold.so

            # Finish supporting 32 & 64bit llvm config headers
            mv %(installroot)%(includedir)/llvm/Config/llvm-config.h %(installroot)%(includedir)/llvm/Config/llvm-config64.h
            %install_file %(pkgdir)/llvm-config.h %(installroot)%(includedir)/llvm/Config/llvm-config.h

            # Make sure that the .defs files are arch-dependent
            mkdir %(installroot)/usr/include/llvm/Config/64
            cd %(installroot)/usr/include/llvm/Config
            for i in *.def; do
                mv $i 64/
                cat %(pkgdir)/defs.h.in | sed "s|@@REPLACE@@|$i|g" > $i
            done
            # LLVM (end)

            ### Clang (begin)
            # Fix bash completion dir
            %install_dir %(installroot)%(bashcompletionsdir)
            mv %(installroot)/usr/share/clang/bash-autocomplete.sh %(installroot)%(bashcompletionsdir)/clang
            ### Clang (end)

            ### libcxx/libunwind (begin)
            # Origin: https://raw.githubusercontent.com/kraj/meta-clang/master/recipes-devtools/clang/clang/libunwind.pc.in
            %install_dir %(installroot)%(libdir)/pkgconfig
            sed -e 's@\@LIBDIR\@@%(libdir)@g' -e 's/@VERSION@/%(version)/g' %(pkgdir)/libunwind.pc.in > %(installroot)%(libdir)/pkgconfig/libunwind.pc
            # libcxx/libunwind (end)
architectures: [emul32, native]
packages    :
    - "%(name)-libs":
        summary: "Library files for %(name)"
        description: |
            Library files for %(name), typically pulled in as a dependency of another package.
        paths:
            - /usr/lib/libLLVM.so.*
            - /usr/lib/libLTO.so.*
            - /usr/lib/libRemarks.so.*
            - /usr/lib/LLVMgold.so
            - /usr/lib/bfd-plugins/LLVMgold.so

    - "%(name)":
        paths:
            - /usr/bin/FileCheck
            - /usr/bin/UnicodeNameMappingGenerator
            - /usr/bin/bugpoint
            - /usr/bin/dsymutil
            - /usr/bin/llc
            - /usr/bin/lli
            - /usr/bin/llvm-*
            - /usr/bin/obj2yaml
            - /usr/bin/opt
            - /usr/bin/reduce-chunk-list
            - /usr/bin/sancov
            - /usr/bin/sanstats
            - /usr/bin/split-file
            - /usr/bin/verify-uselistorder
            - /usr/bin/yaml2obj
            - /usr/share/man/man1/FileCheck*
            - /usr/share/man/man1/bugpoint*
            - /usr/share/man/man1/dsymutil*
            - /usr/share/man/man1/llc*
            - /usr/share/man/man1/lli*
            - /usr/share/man/man1/llvm-*
            - /usr/share/man/man1/opt*
            - /usr/share/opt-viewer

    # We can't split out the static libraries from this because the cmake files reference them
    - "%(name)-devel":
        paths:
            - /usr/bin/count
            - /usr/bin/lli-child-target
            - /usr/bin/llvm-config
            - /usr/bin/not
            - /usr/bin/yaml-bench
            - /usr/include/llvm*
            - /usr/lib/cmake/llvm
            - /usr/lib/libLLVM.so
            - /usr/lib/libLLVM-*.so
            - /usr/lib/libLLVM*.a
            - /usr/lib/libLTO.so
            - /usr/lib/libRemarks.so
            - /usr/share/man/man1/llvm-config*
            - /usr/share/man/man1/llvm-tblgen*
            - /usr/share/man/man1/tblgen* # Maybe?
        rundeps:
            - pkgconfig(libedit)
            - pkgconfig(libzstd)
            - mlir-devel
            - polly-devel

    - "%(name)-32bit":
        summary: "Library files for %(name) (32-bit)"
        description: |
            Library files for %(name), typically pulled in as a dependency of another package (32-bit).
        paths:
            - /usr/lib32/libLLVM.so.*
            - /usr/lib32/libLTO.so.*
            - /usr/lib32/libRemarks.so.*
            - /usr/lib32/LLVMgold.so

    - "%(name)-32bit-devel":
        paths:
            - /usr/bin/llvm-config32
            - /usr/include/llvm/Config/llvm-config32.h
            - /usr/include/llvm/Config/32
            - /usr/lib32/cmake/llvm
            - /usr/lib32/libLLVM.so
            - /usr/lib32/libLLVM-*.so
            - /usr/lib32/libLLVM*.a
            - /usr/lib32/libLTO.so
            - /usr/lib32/libRemarks.so

    - "%(name)-bolt":
        summary: "Binary Optimization and Layout Tool"
        description: |
            Binary Optimization and Layout Tool
        paths:
            - /usr/bin/llvm-bolt*
            - /usr/bin/merge-fdata
            - /usr/bin/perf2bolt
            - /usr/lib/libbolt*.a

    - "clang-libs":
        summary: "Library files for clang"
        description: |
            Library files for clang, typically pulled in as a dependency of another package.

            This package contains the core clang libraries as well as the intrinsics compiler headers.
        paths:
            - /usr/lib/libclang.so.*
            - /usr/lib/libclang-cpp.so.*
            - /usr/lib/clang/*/include/*

    - "clang":
        summary: "Clang compiler front-end (LLVM)"
        description: |
            Clang compiler front-end built as part of the LLVM compiler infrastructure project.

            This package contains the clang compiler, the compiler-rt object files for building
            64bit applications, and the 64bit compiler-rt sanitizer libraries.
        rundeps:
            - glibc-devel
            - libcxx-devel
            - lld
            - llvm
            - openmp-devel
            - polly
        paths:
            - /usr/bin/*clang*
            - /usr/lib/clang/*/bin/*
            - /usr/lib/clang/*/lib/linux/*x86_64*
            - /usr/lib/clang/*/share/*
            - /usr/share/bash-completion/completions/clang
            - /usr/share/man/man1/clang*

    - "clang-tools":
        summary: "Additional Clang tools"
        description: |
            A set of extra tools built using Clang's tooling API
        rundeps:
            - clang
        paths:
            - /usr/bin/amdgpu-arch
            - /usr/bin/analyze-build
            - /usr/bin/c-index-test
            - /usr/bin/clang-apply-replacements
            - /usr/bin/clang-change-namespace
            - /usr/bin/clang-check
            - /usr/bin/clang-doc
            - /usr/bin/clang-extdef-mapping
            - /usr/bin/clang-format
            - /usr/bin/clang-include-*
            - /usr/bin/clang-installapi
            - /usr/bin/clang-linker-wrapper
            - /usr/bin/clang-move
            - /usr/bin/clang-nvlink-wrapper
            - /usr/bin/clang-offload-*
            - /usr/bin/clang-query
            - /usr/bin/clang-refactor
            - /usr/bin/clang-reorder-fields
            - /usr/bin/clang-repl
            - /usr/bin/clang-sycl-linker
            - /usr/bin/clang-tidy
            - /usr/bin/clangd
            - /usr/bin/diagtool
            - /usr/bin/find-all-symbols
            - /usr/bin/git-clang-format
            - /usr/bin/hmaptool
            - /usr/bin/intercept-build
            - /usr/bin/modularize
            - /usr/bin/nvptx-arch
            - /usr/bin/pp-trace
            - /usr/bin/run-clang-tidy
            - /usr/bin/scan-*
            - /usr/lib/libear
            - /usr/lib/libscanbuild
            - /usr/lib/llvm/
            - /usr/share/clang/clang-format*
            - /usr/share/clang/clang-include-fixer*
            - /usr/share/clang/clang-tidy-diff*
            - /usr/share/clang/run-find-all-symbols*
            - /usr/share/clang-doc
            - /usr/share/man/man1/diagtool*
            - /usr/share/man/man1/extraclangtools*
            - /usr/share/man/man1/scan-build*
            - /usr/share/scan-*

    - "clang-devel":
        summary: "Development files for clang"
        description: |
            Install this package if you intend to build software against
            the clang package.
        rundeps:
            - "%(name)-devel"
            - clang
            - clang-tools
        paths:
            - /usr/bin/clang-tblgen
            - /usr/lib/cmake/clang
            - /usr/lib/libclang*.so
            - /usr/include/clang*
            - /usr/share/man/man1/clang-tblgen*

    - "clang-32bit":
        summary: "Provides 32-bit object files for clang"
        description: |
            Install this package if you need to build 32-bit binaries with Clang

            This package contains the 32bit compiler-rt object files and sanitizers.
        rundeps:
            - glibc-32bit-devel
            - libcxx-32bit-devel
        paths:
            - /usr/lib/clang/*/lib/linux/*i386*

    - "flang":
        summary: Fortran language front-end designed for integration with LLVM
        description : |
            Fortran language front-end designed for integration with LLVM
        rundeps:
            - lld
            # - Maybe clang?
            # - Do we want Polly here or is just having it as a rundep of clang sufficient?
        paths:
            - /usr/bin/bbc
            - /usr/bin/f18-parse-demo
            - /usr/bin/fir*
            - /usr/bin/flang*
            - /usr/bin/tco
            - /usr/lib/clang/*/include/ISO_Fortran_binding.h
            - /usr/lib/libFortran*.a
            - /usr/include/flang
            - /usr/share/man/man1/flang*

    - "libcxx":
        summary: "Modern C++ standard library"
        description: |
            A modern C++ standard library from the LLVM project, aiming for minimal overhead
            and compilation times. Targets the C++11 standard.
            This is the default C++ library in Aeryn OS used in conjunction with the LLVM
            toolchain.
        paths:
            - /usr/lib/libc++*.so.*
            - /usr/lib/libunwind.so.*

    - "libcxx-32bit":
        summary: "Modern C++ standard library (32-bit)"
        description: |
            Modern C++ standard library (32-bit)
        paths:
            - /usr/lib32/libc++*.so.*
            - /usr/lib32/libunwind.so.*

    - "libcxx-devel":
        summary: "Development files for libcxx"
        description: |
            Development files for libcxx
        paths:
            - /usr/lib/libc++*.so
            - /usr/lib/libunwind.so
            - /usr/lib/libc++.modules.json
            - /usr/lib/pkgconfig/libunwind.pc
            - /usr/include/c++/
            - /usr/include/__libunwind_config.h
            - /usr/include/libunwind*
            - /usr/include/mach-o/compact_unwind_encoding.h
            - /usr/include/unwind*.h
            - /usr/share/libc++
        rundeps:
            - libcxx

    - "libcxx-devel-static":
        summary: "Development files for libcxx - static libraries"
        description: |
            Development files for libcxx - static libraries
        paths:
            - /usr/lib/libc++*.a
            - /usr/lib/libunwind.a
        rundeps:
            - libcxx-devel

    - "libcxx-32bit-devel":
        summary: "Development files for libcxx (32-bit)"
        description: |
            Development files for libcxx (32-bit)
        paths:
            - /usr/lib32/libc++*.so
            - /usr/lib32/libunwind.so
            - /usr/lib32/libc++.modules.json
            - /usr/lib32/pkgconfig/libunwind.pc
        rundeps:
            - libcxx-32bit
            - libcxx-devel

    - "libcxx-32bit-devel-static":
        summary: "Development files for libcxx (32-bit) - static libraries"
        description: |
            Development files for libcxx (32-bit) - static libraries
        paths:
            - /usr/lib32/libc++*.a
            - /usr/lib32/libunwind.a
        rundeps:
            - libcxx-32bit-devel
            - libcxx-devel-static

    - "lld-libs":
        summary: "Library files for lld"
        description: |
            Library files for lld, typically pulled in as a dependency of another package.
        paths:
            - /usr/lib/liblld*.so.*

    - "lld":
        summary: "LLVM-based linker"
        description: |
            A high-performance linker
        paths:
            - /usr/bin/*lld*
            - /usr/bin/wasm-ld

    - "lld-devel":
        summary: "Development files for lld"
        description: |
            Install this package if you intend to build software against
            the lld package.
        paths:
            - /usr/lib/cmake/lld
            - /usr/lib/liblld*.so
            - /usr/include/lld/*
        rundeps:
            - "%(name)-devel"
            - lld

    - "mlir":
        summary: Multi-Level Intermediate Representation Overview
        description: |
            Multi-Level Intermediate Representation Overview
        paths:
            - /usr/lib/libMLIR*.so.*
            - /usr/lib/libmlir*.so.*

    - "mlir-devel":
        summary: Development files for mlir
        description: |
            Development files for mlir
        paths:
            - /usr/bin/mlir*
            - /usr/bin/tblgen-*
            - /usr/include/mlir
            - /usr/include/mlir-c
            - /usr/lib/cmake/mlir
            - /usr/lib/libMLIR*.a
            - /usr/lib/libMLIR*.so
            - /usr/lib/libmlir*.so
            - /usr/share/man/man1/mlir-tblgen*
        rundeps:
            - mlir

    # Should this depend on openmp or the other way around? TBD I guess
    - "offload":
        summary: LLVM OpenMP runtime - hardware accelerator offloading
        description: |
            LLVM OpenMP runtime - hardware accelerator offloading support
        rundeps:
            - openmp
        paths:
            - /usr/bin/llvm-offload-device-info
            - /usr/lib/libLLVMOffload.so.*
            - /usr/lib/libomptarget.so.*

    - "offload-devel":
        summary: Development files for offload
        description: |
            Development files for offload
        rundeps:
            # openmp-devel? TBD
            - offload
        paths:
            - /usr/bin/llvm-omp-kernel-replay
            - /usr/include/offload
            - /usr/lib/libLLVMOffload.so
            - /usr/lib/libomptarget*.bc
            - /usr/lib/libomptarget*.a
            - /usr/lib/libomptarget.so

    - "openmp":
        summary: "LLVM OpenMP runtime"
        description: |
            LLVM OpenMP runtime
        paths:
            - /usr/lib/libarcher.so
            - /usr/lib/libomp.so
            - /usr/lib/libompd.so

    - "openmp-devel":
        summary: "LLVM OpenMP runtime - Development files"
        description: |
            LLVM OpenMP runtime - Development files
        rundeps:
            - openmp
        paths:
            - /usr/lib/cmake/openmp
            - /usr/lib/clang/*/include/omp*.h

    - "polly":
        summary: "LLVM Framework for High-Level Loop and Data-Locality Optimizations"
        description: |
            LLVM Framework for High-Level Loop and Data-Locality Optimizations
        paths:
            - /usr/lib/libPolly.so.*
            - /usr/lib/libPollyISL.so
            - /usr/lib/LLVMPolly.so
            - /usr/share/man/man1/polly*

    - "polly-devel":
        summary: "LLVM Framework for High-Level Loop and Data-Locality Optimizations"
        description: |
            LLVM Framework for High-Level Loop and Data-Locality Optimizations - Development files
        rundeps:
            - polly
        paths:
            - /usr/include/polly
            - /usr/lib/cmake/polly
            - /usr/lib/libPolly.so
