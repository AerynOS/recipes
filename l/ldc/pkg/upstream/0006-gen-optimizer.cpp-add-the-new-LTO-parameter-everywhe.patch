From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Tue, 4 Feb 2025 18:03:56 -0700
Subject: [PATCH 6/9] gen/optimizer.cpp: add the new LTO parameter everywhere

---
 gen/optimizer.cpp | 76 +++++++++++++++++++++++++++++++++++++----------
 1 file changed, 60 insertions(+), 16 deletions(-)

diff --git a/gen/optimizer.cpp b/gen/optimizer.cpp
index 16152fd90a..2159a7464e 100644
--- a/gen/optimizer.cpp
+++ b/gen/optimizer.cpp
@@ -211,7 +211,12 @@ static OptimizationLevel getOptimizationLevel(){
 
 #ifndef IN_JITRT
 static void addAddressSanitizerPasses(ModulePassManager &mpm,
-                                      OptimizationLevel level ) {
+                                      OptimizationLevel level
+#if LDC_LLVM_VER >= 2000
+                                      ,
+                                      ThinOrFullLTOPhase
+#endif
+) {
   AddressSanitizerOptions aso;
   aso.CompileKernel = false;
   aso.Recover = opts::isSanitizerRecoveryEnabled(opts::AddressSanitizer);
@@ -254,13 +259,23 @@ static void addMemorySanitizerPass(ModulePassManager &mpm,
   }
 }
 static void addThreadSanitizerPass(ModulePassManager &mpm,
-                                      OptimizationLevel level ) {
+                                   OptimizationLevel level
+#if LDC_LLVM_VER >= 2000
+                                   ,
+                                   ThinOrFullLTOPhase
+#endif
+) {
   mpm.addPass(ModuleThreadSanitizerPass());
   mpm.addPass(createModuleToFunctionPassAdaptor(ThreadSanitizerPass()));
 }
 
 static void addSanitizerCoveragePass(ModulePassManager &mpm,
-                                      OptimizationLevel level ) {
+                                     OptimizationLevel level
+#if LDC_LLVM_VER >= 2000
+                                     ,
+                                     ThinOrFullLTOPhase
+#endif
+) {
 #if LDC_LLVM_VER >= 1600
   mpm.addPass(SanitizerCoveragePass(
       opts::getSanitizerCoverageOptions()));
@@ -270,8 +285,7 @@ static void addSanitizerCoveragePass(ModulePassManager &mpm,
 #endif
 }
 // Adds PGO instrumentation generation and use passes.
-static void addPGOPasses(ModulePassManager &mpm,
-                                      OptimizationLevel level ) {
+static void addPGOPasses(ModulePassManager &mpm, OptimizationLevel level) {
   if (opts::isInstrumentingForASTBasedPGO()) {
     InstrProfOptions options;
     options.NoRedZone = global.params.disableRedZone;
@@ -295,8 +309,12 @@ static void addPGOPasses(ModulePassManager &mpm,
 #endif // !IN_JITRT
 
 static void addStripExternalsPass(ModulePassManager &mpm,
-                                      OptimizationLevel level ) {
-
+                                  OptimizationLevel level
+#if LDC_LLVM_VER >= 2000
+                                  ,
+                                  ThinOrFullLTOPhase
+#endif
+) {
   if (level == OptimizationLevel::O1 || level == OptimizationLevel::O2 ||
       level == OptimizationLevel::O3) {
     mpm.addPass(StripExternalsPass());
@@ -308,7 +326,12 @@ static void addStripExternalsPass(ModulePassManager &mpm,
 }
 
 static void addSimplifyDRuntimeCallsPass(ModulePassManager &mpm,
-                                      OptimizationLevel level ) {
+                                         OptimizationLevel level
+#if LDC_LLVM_VER >= 2000
+                                         ,
+                                         ThinOrFullLTOPhase
+#endif
+) {
   if (level == OptimizationLevel::O2  || level == OptimizationLevel::O3) {
     mpm.addPass(createModuleToFunctionPassAdaptor(SimplifyDRuntimeCallsPass()));
     if (verifyEach) {
@@ -318,7 +341,12 @@ static void addSimplifyDRuntimeCallsPass(ModulePassManager &mpm,
 }
 
 static void addGarbageCollect2StackPass(ModulePassManager &mpm,
-                                         OptimizationLevel level ) {
+                                        OptimizationLevel level
+#if LDC_LLVM_VER >= 2000
+                                        ,
+                                        ThinOrFullLTOPhase
+#endif
+) {
   if (level == OptimizationLevel::O2  || level == OptimizationLevel::O3) {
     mpm.addPass(createModuleToFunctionPassAdaptor(GarbageCollect2StackPass()));
     if (verifyEach) {
@@ -461,10 +489,11 @@ void runOptimizationPasses(llvm::Module *M, llvm::TargetMachine *TM) {
   ModulePassManager mpm;
 
   if (!noVerify) {
-    pb.registerPipelineStartEPCallback([&](ModulePassManager &mpm,
-                                          OptimizationLevel level) {
-      mpm.addPass(VerifierPass());
-    });
+    pb.registerPipelineStartEPCallback(
+        [&](ModulePassManager &mpm, OptimizationLevel level,
+            ThinOrFullLTOPhase phase = ThinOrFullLTOPhase::None) {
+          mpm.addPass(VerifierPass());
+        });
   }
 
   // TODO: port over strip-debuginfos pass for -strip-debug
@@ -478,7 +507,8 @@ void runOptimizationPasses(llvm::Module *M, llvm::TargetMachine *TM) {
 
   if (opts::isSanitizerEnabled(opts::MemorySanitizer)) {
     pb.registerOptimizerLastEPCallback(
-        [&](ModulePassManager &mpm, OptimizationLevel level) {
+        [&](ModulePassManager &mpm, OptimizationLevel level,
+            ThinOrFullLTOPhase phase = ThinOrFullLTOPhase::None) {
           FunctionPassManager fpm;
           addMemorySanitizerPass(mpm, fpm, level);
           mpm.addPass(createModuleToFunctionPassAdaptor(std::move(fpm)));
@@ -527,9 +557,23 @@ void runOptimizationPasses(llvm::Module *M, llvm::TargetMachine *TM) {
 
   if (optLevelVal == 0) {
 #ifdef IN_JITRT
-    mpm = pb.buildO0DefaultPipeline(level, false);
+#if LDC_LLVM_VER >= 2000
+    const ThinOrFullLTOPhase ltoPrelink = ThinOrFullLTOPhase::None;
+#else
+    const bool ltoPrelink = false;
+#endif // LDC_LLVM_VER >= 2000
+    mpm = pb.buildO0DefaultPipeline(level, ltoPrelink);
+#else
+#if LDC_LLVM_VER >= 2000
+    const ThinOrFullLTOPhase ltoPrelink =
+        opts::isUsingLTO()
+            ? (opts::isUsingThinLTO() ? ThinOrFullLTOPhase::ThinLTOPreLink
+                                      : ThinOrFullLTOPhase::FullLTOPreLink)
+            : ThinOrFullLTOPhase::None;
 #else
-    mpm = pb.buildO0DefaultPipeline(level, opts::isUsingLTO());
+    const bool ltoPrelink = opts::isUsingLTO();
+#endif // LDC_LLVM_VER >= 2000
+    mpm = pb.buildO0DefaultPipeline(level, ltoPrelink);
 #if LDC_LLVM_VER >= 1700
   } else if (opts::ltoFatObjects && opts::isUsingLTO()) {
     mpm = pb.buildFatLTODefaultPipeline(level,
