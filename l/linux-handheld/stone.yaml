#
# SPDX-FileCopyrightText: © 2020-2025 Serpent OS Developers
# SPDX-FileCopyrightText: © 2025 AerynOS Developers
#
# SPDX-License-Identifier: MPL-2.0
#
name        : linux-handheld
version     : 6.15.9
release     : 31
homepage    : https://kernel.org/
upstreams   :
    - https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.15.9.tar.xz : e94f3af85492302f7a819441458f80bca0ad9912e5a4c83c699ff3c63c52957d
summary     : The Linux Kernel for handheld systems
description : |
    The Linux Kernel for handheld systems

    This package provides the Linux Kernel for handheld systems. It is built with
    the LLVM compiler and the LLD linker, and is configured for handheld systems.
license     :
    - GPL-2.0-only
builddeps   :
    - binary(bc)
    - binary(bindgen)
    - binary(bison)
    - binary(cryptsetup)
    - binary(dash)
    - binary(dbus-broker)
    - binary(dracut)
    - binary(eu-readelf)
    - binary(flex)
    - binary(gpg)
    - binary(grep)
    - binary(gzip)
    - binary(kmod)
    - binary(less)
    - binary(loadkeys)
    - binary(m4)
    - binary(moss)
    - binary(pahole)
    - binary(perl)
    - binary(python3)
    - binary(rustc)
    - binary(setfont)
    - binary(tr)
    - binary(which)
    - pkgconfig(gmp)
    - pkgconfig(libelf)
    - pkgconfig(libssl)
    - pkgconfig(libzstd)
    - pkgconfig(mpfr)
    - pkgconfig(ply-boot-client)
    - sysbinary(fsck.ext4)
    - sysbinary(fsck.f2fs)
    - sysbinary(fsck.xfs)
    - sysbinary(lvm)
    - font-cantarell
    - intel-microcode
    - libgcc # libgcc_s.so.1 - needed until we get llvm-libgcc
    - linux-firmware-amd64-microcode
    - linux-firmware-amd-graphics
    - linux-firmware-intel-graphics
    - linux-firmware-nvidia-graphics
    - rust-devel # Needs Rust source
    - serpent-artwork
packages    :
    - "%(name)-devel":
        paths:
            - /usr/src
environment : |
    # Maximize ccache efficiency as well as make the build fully reproducible, except for the initrd which needs a timestamp to be signed
    export KBUILD_BUILD_USER=root
    export KBUILD_BUILD_TIMESTAMP=$(date --utc --date=@$SOURCE_DATE_EPOCH +%%F)
setup       : |
    for i in $(cat %(pkgdir)/patches/series) ; do
        %patch %(pkgdir)/patches/$i
    done

    extraVersion="-%(release).handheld"
    sed -e "s/EXTRAVERSION =.*/EXTRAVERSION = $extraVersion/" -i Makefile

    %install_file %(pkgdir)/config-x86_64 .config
    %make CC=%(cc) LD=%(ld) ARCH=x86_64 LLVM=1 LLVM_IAS=1 WERROR=0 oldconfig || exit 1
build       : |
    %ccache_zero
    # Do NOT use CONFIG_DEBUG_SECTION_MISMATCH as it is GCC specific
    %make VERBOSE=0 V=0 CC=%(cc) LD=%(ld) ARCH=x86_64 LLVM=1 LLVM_IAS=1 WERROR=0
    %make -C tools/objtool VERBOSE=0 V=0 CC=%(cc) LD=%(ld) ARCH=x86_64 LLVM=1 LLVM_IAS=1 WERROR=0
    %ccache_stats
install     : |
    umask 022
    kernelVersion="%(version)-%(release).handheld"
    %install_exe arch/x86/boot/bzImage %(installroot)%(libdir)/kernel/$kernelVersion/vmlinuz

    %install_file .config %(installroot)%(libdir)/kernel/$kernelVersion/config
    %install_file System.map %(installroot)%(libdir)/kernel/$kernelVersion/System.map

    # Modules please
    %install_dir %(installroot)%(libdir)/modules/$kernelVersion
    %make CC=%(cc) LD=%(ld) ARCH=x86_64 LLVM=1 WERROR=0 INSTALL_MOD_PATH=%(installroot)/usr modules_install KERNELRELEASE="$kernelVersion" mod-fw= DEPMOD=/usr/bin/true

    # Manually construct the debug info from the kernel modules
    %install_dir %(installroot)%(libdir)/debug/.build-id
    pushd %(installroot)
    module_list=()
    while IFS=  read -r -d $'\0'; do
        module_list+=("$REPLY")
    done < <(find .%(libdir)/modules -type f -name "*.ko" -print0)
    for module in "${module_list[@]}"; do
        build_id=$(eu-readelf -n ${module} | grep Bui | awk '{print $3}')
        debug_path="%(libdir)/debug/.build-id/${build_id:0:2}/${build_id: 2}.debug"
        %install_dir $(dirname .${debug_path})
        llvm-objcopy --only-keep-debug "${module}" ".${debug_path}"
        llvm-objcopy --add-gnu-debuglink ".${debug_path}" "${module}"
        llvm-strip -g --strip-unneeded "${module}"
    done
    popd
    /usr/sbin/depmod -b %(installroot)/usr ${kernelVersion} -a

    # We can make the initrd smaller by decompressing the firmware prior to compressing the entire initrd.
    mkdir -p eb-fw/
    cp -ra /usr/lib/firmware/* eb-fw
    file_list=()
    while IFS=  read -r -d $'\0'; do
        file_list+=("$REPLY")
    done < <(find eb-fw -type f -print0)
    for file in "${file_list[@]}"; do
        if [ -z ${file##*.zst} ]; then
            unzstd --rm "$file"
        fi
    done

    # Update symlinks
    link_list=()
    while IFS=  read -r -d $'\0'; do
        link_list+=("$REPLY")
    done < <(find eb-fw -type l -print0)
    for file in "${link_list[@]}"; do
        link=$(readlink "$file")
        if [ -z ${link##*.zst} ]; then
            new_link="${link%.zst}"
            ln -sfv "$new_link" "$file"
        fi
        if [ -z ${file##*.zst} ]; then
            new_filename="${file%.zst}"
            mv -v "$file" "$new_filename"
        fi
    done

    # Include early microcode
    # 2025-07-29: Add vfio kernel modules to initrd as they need to be loaded very early in the boot process
    # 2025-07-29: Add modprobe configuration for Nvidia sleep options to cover early KMS module loading
    drm_modules="amdgpu hyperv_drm i915 qxl radeon simpledrm vboxvideo virtio-gpu vmwgfx xe"
    vfio_modules="vfio_pci vfio_iommu_type1"
    PATH="/usr/bin:/usr/sbin" dracut --strip --tmpdir /tmp -N -f \
        --kmoddir %(installroot)%(libdir)/modules/${kernelVersion} --kver $kernelVersion \
        --add "bash rescue systemd virtiofs lvm dm moss zz-init-extension" \
        --strip --hardlink --nomdadmconf --nolvmconf --reproducible \
        --add-drivers "${drm_modules} ${vfio_modules}" \
        --zstd --early-microcode --fwdir eb-fw/ \
        --include %(pkgdir)/initrd/depmod.conf %(libdir)/depmod.d/depmod.conf \
        --include %(pkgdir)/initrd/timeouts.conf %(libdir)/systemd/system.conf.d/timeouts.conf \
        --include %(pkgdir)/initrd/nvidia-sleep.modprobe %(libdir)/modprobe.d/nvidia-sleep.conf \
        %(installroot)%(libdir)/kernel/$kernelVersion/50-default.initrd

    # Temporary: Help with VMs
    ln -s $kernelVersion/50-default.initrd %(installroot)%(libdir)/kernel/current.handheld.initrd
    ln -s $kernelVersion/vmlinuz %(installroot)%(libdir)/kernel/current.handheld.kernel
    %install_file %(pkgdir)/boot.json %(installroot)%(libdir)/kernel/$kernelVersion/boot.json
    sed -e 's/@VERSION@/%(version)-%(release).handheld/g' -i %(installroot)%(libdir)/kernel/$kernelVersion/boot.json

    # Install kernel headers
    headerRoot="/usr/src/linux-headers-%(version)-%(release).handheld"
    dstDir="%(installroot)$headerRoot"
    %install_dir $dstDir

    # Copy core build files
    find . -type f \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o -name '*.sh' -o -name '*.pl' -o -name '*.lds' \) -exec cp --parents {} $dstDir \;

    # Copy headers and essential directories
    for i in include scripts Documentation ; do
        cp -R $i $dstDir/
    done

    # Copy architecture specific headers
    (find arch -name include -type d -print | xargs -n1 -i: find : -type f) | cpio -pd --preserve-modification-time $dstDir

    # Media driver headers
    for dir in "drivers/media/dvb-frontends" "drivers/media/tuners"; do
        find $dir -name "*.h" -exec cp --parents {} $dstDir \;
    done
    find drivers/media/platform -name "*.h" -exec cp --parents {} $dstDir \;

    # Clean unnecessary files
    find $dstDir/scripts -name "*.o" -delete

    # Copy build requirements
    for i in Module.symvers System.map .config ; do
        %install_file $i $dstDir/
    done
    %install_exe tools/objtool/objtool $dstDir/tools/objtool/objtool
    chmod 00755 $dstDir/scripts/basic/fixdep

    # Set up module symlinks
    rm -vf %(installroot)%(libdir)/modules/$kernelVersion/build || :
    rm -vf %(installroot)%(libdir)/modules/$kernelVersion/source || :
    ln -svf build %(installroot)%(libdir)/modules/$kernelVersion/source
    ln -svf $headerRoot %(installroot)%(libdir)/modules/$kernelVersion/build

    # Compress modules with zstd
    find "%(installroot)%(libdir)/modules" -name '*.ko' -print -exec zstd {} \; -exec rm -v {} \;
