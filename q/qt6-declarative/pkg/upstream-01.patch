From e8693912fe5c0016ea715a3bad9a8b99fc2aa446 Mon Sep 17 00:00:00 2001
From: Fabian Kosmale <fabian.kosmale@qt.io>
Date: Fri, 2 May 2025 09:50:37 +0200
Subject: [PATCH] QQmlComponent::loadFromModule: Fix crash with dynamic
 metaobjects

If an object has a dynamic meta-object (e.g. because it has been
extended with additional enums), we can no longer create a property
cache.
This could have caused a null-poninter dereference; avoid this by
checking for nullptr.

We currently don't do any checks at all in that case; finding a better
solution is tracked in QTBUG-136560.

Pick-to: 6.8
Change-Id: I678cf9908d5bbec50e133a462f7f4c813dca44dd
Reviewed-by: Ulf Hermann <ulf.hermann@qt.io>
(cherry picked from commit 3c347cc0a1f1a514a8b849ecbad5cab31bdd00b3)
Reviewed-by: Fabian Kosmale <fabian.kosmale@qt.io>
---
 src/qml/qml/qqmlcomponent.cpp                 | 18 ++++--
 .../qml/qqmlcomponent/tst_qqmlcomponent.cpp   | 59 +++++++++++++++++--
 2 files changed, 67 insertions(+), 10 deletions(-)

diff --git a/src/qml/qml/qqmlcomponent.cpp b/src/qml/qml/qqmlcomponent.cpp
index c7350458b2..1690ef4fe8 100644
--- a/src/qml/qml/qqmlcomponent.cpp
+++ b/src/qml/qml/qqmlcomponent.cpp
@@ -1137,13 +1137,19 @@ QObject *QQmlComponentPrivate::beginCreate(QQmlRefPointer<QQmlContextData> conte
             state.ensureRequiredPropertyStorage(rv);
         }
 
-        for (int i = 0, propertyCount = propertyCache->propertyCount(); i < propertyCount; ++i) {
-            if (const QQmlPropertyData *propertyData = propertyCache->property(i); propertyData->isRequired()) {
-                state.ensureRequiredPropertyStorage(rv);
-                RequiredPropertyInfo info;
-                info.propertyName = propertyData->name(rv);
-                state.addPendingRequiredProperty(rv, propertyData, info);
+        if (propertyCache) {
+            for (int i = 0, propertyCount = propertyCache->propertyCount(); i < propertyCount; ++i) {
+                if (const QQmlPropertyData *propertyData = propertyCache->property(i); propertyData->isRequired()) {
+                    state.ensureRequiredPropertyStorage(rv);
+                    RequiredPropertyInfo info;
+                    info.propertyName = propertyData->name(rv);
+                    state.addPendingRequiredProperty(rv, propertyData, info);
+                }
             }
+        } else {
+            // we couldn't get a propertyCache from ensurePropertyCache
+            // it is unclear what we can do in that case
+            // ### TOOD: QTBUG-136560
         }
     }
 
diff --git a/tests/auto/qml/qqmlcomponent/tst_qqmlcomponent.cpp b/tests/auto/qml/qqmlcomponent/tst_qqmlcomponent.cpp
index 3c230afae5..88cc895f08 100644
--- a/tests/auto/qml/qqmlcomponent/tst_qqmlcomponent.cpp
+++ b/tests/auto/qml/qqmlcomponent/tst_qqmlcomponent.cpp
@@ -1527,16 +1527,67 @@ struct SingleRequiredProperty : QObject
     int i = 42;
 };
 
+
+struct SingleRequiredPropertyDynamic : QObject
+{
+    Q_OBJECT
+    Q_PROPERTY(int i MEMBER i REQUIRED)
+
+    int i = 42;
+
+    class QObjectDynamicMetaObject : public QDynamicMetaObjectData
+    {
+    public:
+    #if QT_VERSION >= QT_VERSION_CHECK(7, 0, 0)
+        const QMetaObject *toDynamicMetaObject(QObject *) const final
+        {
+            return &SingleRequiredPropertyDynamic::staticMetaObject;
+        }
+    #else
+        QMetaObject *toDynamicMetaObject(QObject *) final
+        {
+            return const_cast<QMetaObject *>(&SingleRequiredPropertyDynamic::staticMetaObject);
+        }
+    #endif
+        int metaCall(QObject *o, QMetaObject::Call c, int id, void **argv) final
+        {
+            return o->qt_metacall(c, id, argv);
+        }
+    };
+
+public:
+    SingleRequiredPropertyDynamic() {
+        auto priv = QObjectPrivate::get(this);
+        priv->metaObject = new QObjectDynamicMetaObject;
+    }
+
+    ~SingleRequiredPropertyDynamic()  {
+        auto priv = QObjectPrivate::get(this);
+        delete priv->metaObject;
+        priv->metaObject = nullptr ;
+    }
+};
+
 void tst_qqmlcomponent::loadFromModuleRequired()
 {
 
     QQmlEngine engine;
     qmlRegisterType<SingleRequiredProperty>("qqmlcomponenttest", 1, 0, "SingleRequiredProperty");
-    QQmlComponent component(&engine, "qqmlcomponenttest", "SingleRequiredProperty");
-    QVERIFY2(!component.isError(), qPrintable(component.errorString()));
+    qmlRegisterType<SingleRequiredPropertyDynamic>("qqmlcomponenttest", 1, 0, "SingleRequiredPropertyDynamic");
+    {
+        QQmlComponent component(&engine, "qqmlcomponenttest", "SingleRequiredProperty");
+        QVERIFY2(!component.isError(), qPrintable(component.errorString()));
 
-    QScopedPointer<QObject> root(component.create());
-    QVERIFY(!root);
+        QScopedPointer<QObject> root(component.create());
+        QVERIFY(!root);
+    }
+    {
+        QQmlComponent component(&engine, "qqmlcomponenttest", "SingleRequiredPropertyDynamic");
+        QVERIFY2(!component.isError(), qPrintable(component.errorString()));
+        QScopedPointer<QObject> root(component.create());
+        QEXPECT_FAIL("", "Can't check required properties when there's a dynamic metaobject", Continue);
+        QVERIFY(!root);
+    }
 }
 
 void tst_qqmlcomponent::loadFromQrc()
-- 
GitLab

