From cbd2d3e3c9a24cb143dde9669d16d4ea74f8fa2a Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@serpentos.com>
Date: Sat, 21 Dec 2024 15:05:10 +0000
Subject: [PATCH] moss/client: Forbid linking of empty files (fixes #372)

Turns out a whole bunch of files are unnecessarily empty and cause havoc
with ext4 by ballooning the link_count for the initially constructed empty file
beyond 65k, the upper limit (`u16`)

Whilst Serpent OS will default to `xfs` or `f2fs` in time, we still need to
eliminate this rather nasty `EMLINK` issue.

Signed-off-by: Ikey Doherty <ikey@serpentos.com>
---
 moss/src/client/mod.rs | 47 ++++++++++++++++++++++++++++--------------
 1 file changed, 32 insertions(+), 15 deletions(-)

diff --git a/moss/src/client/mod.rs b/moss/src/client/mod.rs
index a3a7209..d9243e9 100644
--- a/moss/src/client/mod.rs
+++ b/moss/src/client/mod.rs
@@ -706,21 +706,38 @@ impl Client {
 
                 // Link relative from cache to target
                 let fp = directory.join(hash);
-                linkat(
-                    Some(cache),
-                    fp.to_str().unwrap(),
-                    Some(parent),
-                    subpath,
-                    nix::unistd::LinkatFlags::NoSymlinkFollow,
-                )?;
-
-                // Fix permissions
-                fchmodat(
-                    Some(parent),
-                    subpath,
-                    Mode::from_bits_truncate(item.layout.mode),
-                    nix::sys::stat::FchmodatFlags::NoFollowSymlink,
-                )?;
+
+                match *id {
+                    // Mystery empty-file hash. Do not allow dupes!
+                    // https://github.com/serpent-os/tools/issues/372
+                    0x99aa06d3014798d86001c324468d497f => {
+                        let fd = fcntl::openat(
+                            parent,
+                            subpath,
+                            OFlag::O_CREAT | OFlag::O_WRONLY | OFlag::O_TRUNC,
+                            Mode::from_bits_truncate(item.layout.mode),
+                        )?;
+                        close(fd)?;
+                    }
+                    // Regular file
+                    _ => {
+                        linkat(
+                            Some(cache),
+                            fp.to_str().unwrap(),
+                            Some(parent),
+                            subpath,
+                            nix::unistd::LinkatFlags::NoSymlinkFollow,
+                        )?;
+
+                        // Fix permissions
+                        fchmodat(
+                            Some(parent),
+                            subpath,
+                            Mode::from_bits_truncate(item.layout.mode),
+                            nix::sys::stat::FchmodatFlags::NoFollowSymlink,
+                        )?;
+                    }
+                }
             }
             layout::Entry::Symlink(source, _) => {
                 symlinkat(source.as_str(), Some(parent), subpath)?;
-- 
2.47.1

