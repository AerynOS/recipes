#
# SPDX-FileCopyrightText: © 2020-2024 Serpent OS Developers
#
# SPDX-License-Identifier: MPL-2.0
#
name        : rust
version     : 1.89.0
release     : 22
homepage    : https://www.rust-lang.org/
upstreams   :
    - https://static.rust-lang.org/dist/rustc-1.89.0-src.tar.xz : 0b9d55610d8270e06c44f459d1e2b7918a5e673809c592abed9b9c600e33d95a
    - git|https://github.com/rust-lang/llvm-project.git :
        ref: e8a2ffcf322f45b8dce82c65ab27a3e2430a6b51 # rustc/20.1-2025-07-13
summary     : Rust programming language compiler + tools
description : |
    Rust programming language compiler + tools
license     :
    - Apache-2.0
    - BSL-1.0
    - CC-BY-4.0
    - CC-BY-NC-SA-3.0
    - CC0-1.0
    - GCC-exception-3.1
    - GPL-2.0-or-later
    - GPL-3.0-or-later
    - MIT
    - Zlib
# Enable this when bootstrapping
# networking  : true
builddeps   :
    - binary(FileCheck)
    - binary(cargo)
    - binary(cmake)
    - binary(llvm-config)
    - binary(ln)
    - binary(ninja)
    - binary(python)
    - binary(strip)
    - binary(which)
    - pkgconfig32(libunwind)
    - pkgconfig(jemalloc)
    - pkgconfig(libcurl)
    - pkgconfig(libffi)
    - pkgconfig(libgit2)
    - pkgconfig(libxml-2.0)
    - pkgconfig(openssl)
    - pkgconfig(sqlite3)
    - pkgconfig(zlib)
    - gcc-32bit-devel
    - glibc-32bit-devel
environment : |
    # Don't set these here, all configuration should come from config.toml or the package.yml
    unset RUSTFLAGS

    # Force use of libsqlite3, libgit2, and libssh2 system libs
    export LIBSQLITE3_SYS_USE_PKG_CONFIG=1
    export LIBSSH2_SYS_USE_PKG_CONFIG=1
    export LIBGIT2_NO_VENDOR=1

    # Todo: Figure out how to link this against a dynamic libjemalloc
    export JEMALLOC_OVERRIDE=%(libdir)/libjemalloc.a
setup       : |
    # The build process for Rust seems to partially use the included LLVM source during the build
    #  even if ultimately it links against the system LLVM. This causes a failure of the PGO build
    #  due to the profiles being generated with a different version (the included LLVM) than what is
    #  used for the final build (the system LLVM). To work around this we override the included LLVM
    #  source with the rustc version that reasonably corresponds to the major version of our system
    #  LLVM. This is also means that said source needs to be changed when the system LLVM changes.
    rm -rf src/llvm-project
    cp -r %(sourcedir)/llvm-project.git src/llvm-project

    sed -e 's|@@LTO@@|thin-local|g' %(pkgdir)/config.toml.in > config.toml.pgo

    sed -e 's|@@LTO@@|fat|g' %(pkgdir)/config.toml.in > config.toml.release

    # Ensure that we use the system sqlite3
    %patch %(pkgdir)/0001-unbundle-sqlite.patch -d src/tools/cargo
    find ./vendor/libsqlite3-sys*/sqlite3/ -mindepth 1 -delete -print

    # Remove unused vendored libraries
    find ./vendor/curl-sys*/curl/ -mindepth 1 -delete -print
    find ./vendor/libffi-sys*/libffi/ -mindepth 1 -delete -print
    find ./vendor/libssh2-sys*/libssh2/ -mindepth 1 -delete -print
    find ./vendor/libz-sys*/src/zlib{,-ng}/ -mindepth 1 -delete -print
    find ./vendor/openssl-src*/openssl/ -mindepth 1 -delete -print
    find ./vendor/libgit2-sys*/libgit2/ -mindepth 1 -delete -print

    # Fix bootstrap checking checksums for all the files we just deleted
    find vendor -name .cargo-checksum.json -print \
        -exec sed -i.uncheck -e 's/"files":{[^}]*}/"files":{ }/' '{}' '+'

    # Force the libdir resolution to use lib which fixes a build failure introduced by 1.89.0
    # │B│ error[E0463]: can't find crate for `core`
    # │B│   |
    # │B│   = note: the `x86_64-unknown-linux-gnu` target may not be installed
    # │B│   = help: consider downloading the target with `rustup target add x86_64-unknown-linux-gnu`
    # │B│   = help: consider building the standard library from source with `cargo build -Zbuild-std`
    # Issue introduced by https://github.com/rust-lang/rust/pull/141729
    # `rustc --print target-libdir` should be `/usr/lib/rustlib/x86_64-unknown-linux-gnu/lib`
    %patch %(pkgdir)/0001-downstream-Hardcode-libdir-path.patch
    # TODO: This patch can be removed in the next package build after the 1.89.0 update
    %patch %(pkgdir)/0001-Revert-resolve-target-libdir-directly-from-rustc.patch
build       : |
    python ./x.py build \
            --build-dir %(workdir)/build-pgo \
            --config config.toml.pgo \
            --jobs %(jobs) \
            --rust-profile-generate %(workdir)/rustc-pgo-profile-data \
            --stage 2

    llvm-profdata merge -output=%(workdir)/rustc-pgo-profile-data/rustc-pgo.profdata %(workdir)/rustc-pgo-profile-data/default_*.profraw

    # rust-bootstrap is very inconsistent with the stages of various tools that it wants to build between `dist` and `install`. This
    # causes a lot of redundant and unnecessary builds if we attempt to do the build with various stages (IE build the compiler first, then the
    # tools, then install it last). To prevent this from happening just let `install` figure out what it wants.
    DESTDIR=%(installroot) python3 x.py install \
            --build-dir %(workdir)/build-release \
            --config config.toml.release \
            --jobs %(jobs) \
            --rust-profile-use %(workdir)/rustc-pgo-profile-data/rustc-pgo.profdata
install     : |
    install -Dm00644 %(installroot)/etc/bash_completion.d/* -t %(installroot)/usr/share/bash-completion/completions
    rm -rvf %(installroot)/etc

    # Remove text files from libs (manifests, installation logs...)
    find %(installroot)/%(libdir)/rustlib -maxdepth 1 -type f -delete -print
packages    :
    - "%(name)":
        paths:
            - /usr/lib/lib*.so
            - /usr/lib/rustlib/x86_64-unknown-linux-gnu
        rundeps:
            - binary(clang)
            - binary(lld)

    - "%(name)-32bit":
        paths:
            - /usr/lib/rustlib/i686-unknown-linux-gnu
        rundeps:
            - "%(name)"
            - clang-32bit

    - "%(name)-devel":
        paths:
            - /usr/bin/cargo-clippy
            - /usr/bin/cargo-fmt
            - /usr/bin/clippy-driver
            - /usr/bin/rust-analyzer
            - /usr/bin/rust-gdb*
            - /usr/bin/rust-lldb
            - /usr/bin/rustfmt
            - /usr/lib/rustlib/etc
            - /usr/lib/rustlib/src
            - /usr/libexec/rust-analyzer-proc-macro-srv

    - "%(name)-docs":
        paths:
            - /usr/share/doc
