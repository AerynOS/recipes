name        : llvm
version     : 14.0.4
release     : 1
summary     : Low Level Virtual Machine
license     :
    - Apache-2.0 WITH LLVM-exception
    - NCSA
homepage    : https://www.llvm.org
description : |
    Low Level Virtual Machine
upstreams   :
    - https://github.com/llvm/llvm-project/archive/52528806579b445f627cd93ff8201a59265795e8.tar.gz: 5df11e0b433468ce7d36e6d1df2ebd21f3be9c1b88faedca3ba7d7274c7b220d
builddeps   :
    - gcc-32bit-devel
    - glibc-32bit-devel
    - binutils-devel
    - ncurses-devel
    - cmake
    - ninja
    - libcxx-32bit-devel
    - libffi-devel
    - libxcrypt-devel
    - patch
    - python
    - libxml2-devel
    - zlib-devel
    - llvm-bolt
environment : |
    export BOOTSTRAP=TRUE

    export llvmopts="
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_SKIP_RPATH=ON \
        -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
        -DCLANG_DEFAULT_LINKER=lld \
        -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
        -DCLANG_DEFAULT_RTLIB=compiler-rt \
        -DCLANG_DEFAULT_UNWINDLIB=libunwind \
        -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
        -DCOMPILER_RT_USE_LIBCXX=ON \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_BUILD_TOOLS=ON \
        -DLLVM_DEFAULT_TARGET_TRIPLE=%(build) \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_LIBCXX=ON \
        -DLLVM_ENABLE_LIBXML2=ON \
        -DLLVM_ENABLE_LTO=Thin \
        -DLLVM_ENABLE_PROJECTS='clang;compiler-rt;lld;llvm;polly' \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_TESTS=ON \
        -DLLVM_INCLUDE_UTILS=ON \
        -DLLVM_LIBDIR_SUFFIX=%(libsuffix) \
        -DLLVM_TARGET_ARCH=X86_64 \
        -DLLVM_TARGETS_TO_BUILD=X86 \
        -DLLVM_USE_SANITIZER=OFF \
        "

    if [ -d "%(pkgdir)/bootstrap" ]; then
    export PATH="%(pkgdir)/bootstrap/bin:${PATH}"
    export llvmopts="${llvmopts} \
        -DCMAKE_AR=%(pkgdir)/bootstrap/bin/llvm-ar \
        -DCMAKE_NM=%(pkgdir)/bootstrap/bin/llvm-nm \
        -DCMAKE_RANLIB=%(pkgdir)/bootstrap/bin/llvm-ranlib \
        -DCMAKE_C_COMPILER=%(pkgdir)/bootstrap/bin/clang \
        -DCMAKE_CXX_COMPILER=%(pkgdir)/bootstrap/bin/clang++ \
        -DCLANG_TABLEGEN=%(pkgdir)/bootstrap/bin/clang-tblgen \
        -DLLVM_TABLEGEN=%(pkgdir)/bootstrap/bin/llvm-tblgen \
        "
    fi

    # Without RPATH, we need help finding the right libraries to use
    export LD_LIBRARY_PATH="%(workdir)/%(builddir)/lib"
setup       : |
    %patch %(pkgdir)/llvm-libgcc.patch

    %patch %(pkgdir)/perf/0001-Reduce-GCC-startup-searches.patch
    %patch %(pkgdir)/serpent/0001-Use-correct-Serpent-OS-multilib-paths-for-ld.patch
    %patch %(pkgdir)/serpent/0001-Make-gnu-hash-the-default-for-lld-and-clang.patch
    %patch %(pkgdir)/serpent/0001-Update-binutils-version-to-match-Serpent-OS.patch

    # Build a bootstrap stage1 compiler if it doesn't exist already
    if [ ! -d "%(pkgdir)/bootstrap" ] && [ ! -z "${BOOTSTRAP}" ]; then
        # Set basic bootstrap flags
        export CFLAGS="-march=native -fno-semantic-interposition -pipe -O3 -mllvm -polly -mllvm -polly-vectorizer=stripmine"
        export CXXFLAGS="-march=native -fno-semantic-interposition -pipe -O3 -mllvm -polly -mllvm -polly-vectorizer=stripmine"
        export LDFLAGS="-Wl,--icf=all -Wl,--gc-sections -Wl,-Bsymbolic-functions -Wl,--as-needed -Wl,--pack-dyn-relocs=relr"

        mkdir -p %(pkgdir)/bootstrap
        cd %(pkgdir)/bootstrap
        cmake -G Ninja %(workdir)/llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DCLANG_DEFAULT_LINKER=lld \
            -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
            -DENABLE_LINKER_BUILD_ID=ON \
            -DLLVM_DEFAULT_TARGET_TRIPLE='%(build)' \
            -DLLVM_ENABLE_LTO=Thin \
            -DLLVM_ENABLE_PROJECTS='clang;lld;llvm;polly' \
            -DLLVM_ENABLE_RUNTIMES='compiler-rt' \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_TARGET_ARCH='X86_64' \
            -DLLVM_TARGETS_TO_BUILD='host' \
            -DLLVM_OPTIMIZED_TABLEGEN=ON
        ninja -j "%(jobs)" clang compiler-rt lld llvm-profdata llvm-ar llvm-nm llvm-ranlib llvm-objcopy Polly -v
    fi
build       : |
    # Separate the cmake stage from bootstrap for clean FLAGS
    %cmake ${llvmopts} -S llvm \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON

    %cmake_build
install     : |
    %cmake_install

    %cmake ${llvmopts} -S llvm \
        -DLLVM_BUILD_LLVM_DYLIB=OFF \
        -DLLVM_LINK_LLVM_DYLIB=OFF \
        -DCLANG_LINK_CLANG_DYLIB=OFF

    # Relink lld and clang statically
    %cmake_build lld clang

    # Major clang version
    major_version=$(echo %(version) | cut -d. -f1)
    %bolt_instr %(workdir)/%(builddir)/bin/clang-${major_version}

    export PATH="%(workdir)/%(builddir)/bin:${PATH}"
    mkdir profile
    cd profile
    %cmake ${llvmopts} -S ../runtimes \
        -DCMAKE_C_COMPILER=%(workdir)/%(builddir)/bin/clang \
        -DCMAKE_CXX_COMPILER=%(workdir)/%(builddir)/bin/clang++ \
        -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi;libunwind' \
        -DLLVM_ENABLE_LTO=Thin \
        -DCOMPILER_RT_USE_LIBCXX=ON \
        -DLIBCXXABI_USE_COMPILER_RT=ON \
        -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
        -DLIBCXX_USE_COMPILER_RT=ON \
        -DLIBUNWIND_USE_COMPILER_RT=ON
    %cmake_build
    cd ..

    %bolt_merge %(workdir)/%(builddir)/bin/clang-${major_version}
    %bolt_opt %(workdir)/%(builddir)/bin/clang-${major_version}

    %install_bin %(workdir)/%(builddir)/bin/clang %(workdir)/%(builddir)/bin/lld

    rm -rf %(installroot)/usr/lib/libclang*.a
workload    : |
    # check-compiler-rt needs sanitizer changes
    %cmake_build check-clang check-llvm check-lld check-polly -k 10000 ||:
# LTO needs to be set in LLVM cmake flags so it adds -fno-lto where needed
tuning      :
    - bolt
    - fortify: false
    - harden: false
    - icf: all
    - lto: false
    - nosemantic
    - polly
    - symbolic
cspgo       : false
packages    :
    - "%(name)-libs":
        summary: "Library files for %(name)"
        description: |
            Library files for %(name), typically pulled in as a dependency of another package.
        paths:
            - /usr/lib/libLLVM-*.so

    - "clang":
        summary: "Clang compiler front-end (LLVM)"
        description: |
            Clang compiler front-end built as part of the LLVM compiler infrastructure project.
        rundeps:
            - libcxx-devel
            - lld
            - llvm
        paths:
            - /usr/bin/analyze-build
            - /usr/bin/c-index-test
            - /usr/bin/*clang*
            - /usr/bin/diagtool
            - /usr/bin/hmaptool
            - /usr/bin/intercept-build
            - /usr/bin/scan-*
            - /usr/lib/clang/*/bin
            - /usr/lib/clang/*/include
            - /usr/lib/clang/*/lib/linux/*x86_64*
            - /usr/lib/clang/*/share
            - /usr/lib/libear
            - /usr/libexec
            - /usr/share/clang
            - /usr/share/man
            - /usr/share/scan-*

    - "clang-libs":
        summary: "Library files for clang"
        description: |
            Library files for clang, typically pulled in as a dependency of another package.
        paths:
            - /usr/lib/libclang*.so.*

    - "clang-devel":
        summary: "Development files for clang"
        description: |
            Install this package if you intend to build software against
            the clang package.
        paths:
            - /usr/lib/cmake/clang
            - /usr/lib/libclang*.so
            - /usr/include/clang*
        rundeps:
            - clang

    - "clang-32bit":
        summary: "Provides 32-bit runtime libraries for clang"
        description: |
            Install this package if you need the 32-bit versions of the
            clang package libraries.
        paths:
            - /usr/lib/clang/*/lib/linux/*i386*

    - "lld":
        summary: "Clang compiler front-end (LLVM)"
        description: |
            Clang compiler front-end built as part of the LLVM compiler infrastructure project.
        paths:
            - /usr/bin/*lld*
            - /usr/bin/wasm-ld

    - "lld-devel":
        summary: "Development files for lld"
        description: |
            Install this package if you intend to build software against
            the lld package.
        paths:
            - /usr/lib/cmake/lld
            - /usr/lib/liblld*.a
        rundeps:
            - lld
