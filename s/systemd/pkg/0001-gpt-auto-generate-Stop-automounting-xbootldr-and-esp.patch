From 2900100c52ddc178252b9a854f16b8c4aafda9a6 Mon Sep 17 00:00:00 2001
From: Ikey Doherty <ikey@serpentos.com>
Date: Mon, 15 Jul 2024 23:42:46 +0000
Subject: [PATCH] gpt-auto-generate: Stop automounting `xbootldr` and `esp`

This is now exclusively the management domain of blsforme by way of `moss`
integration in Serpent OS.

We cannot risk vfat corruption issues therefore we only keep the ESP/XBOOTLDR
mounted as and when we need them, and immediately umount when finished.

Signed-off-by: Ikey Doherty <ikey@serpentos.com>
---
 src/gpt-auto-generator/gpt-auto-generator.c | 140 --------------------
 1 file changed, 140 deletions(-)

diff --git a/src/gpt-auto-generator/gpt-auto-generator.c b/src/gpt-auto-generator/gpt-auto-generator.c
index 2e60b82..9446607 100644
--- a/src/gpt-auto-generator/gpt-auto-generator.c
+++ b/src/gpt-auto-generator/gpt-auto-generator.c
@@ -411,134 +411,6 @@ static int add_automount(
         return generator_add_symlink(arg_dest, SPECIAL_LOCAL_FS_TARGET, "wants", unit);
 }
 
-static const char *esp_or_xbootldr_options(const DissectedPartition *p) {
-        assert(p);
-
-        /* Discoveried ESP and XBOOTLDR partition are always hardened with "noexec,nosuid,nodev".
-         * If we probed vfat or have no idea about the file system then assume these file systems are vfat
-         * and thus understand "umask=0077". */
-
-        if (!p->fstype || streq(p->fstype, "vfat"))
-                return "umask=0077,noexec,nosuid,nodev";
-
-        return "noexec,nosuid,nodev";
-}
-
-static int add_partition_xbootldr(DissectedPartition *p) {
-        int r;
-
-        assert(p);
-
-        if (in_initrd()) {
-                log_debug("In initrd, ignoring the XBOOTLDR partition.");
-                return 0;
-        }
-
-        r = fstab_is_mount_point("/boot");
-        if (r < 0)
-                return log_error_errno(r, "Failed to parse fstab: %m");
-        if (r > 0) {
-                log_debug("/boot specified in fstab, ignoring XBOOTLDR partition.");
-                return 0;
-        }
-
-        r = path_is_busy("/boot");
-        if (r < 0)
-                return r;
-        if (r > 0)
-                return 0;
-
-        return add_automount("boot",
-                             p->node,
-                             "/boot",
-                             p->fstype,
-                             /* rw= */ true,
-                             /* growfs= */ false,
-                             esp_or_xbootldr_options(p),
-                             "Boot Loader Partition",
-                             120 * USEC_PER_SEC);
-}
-
-#if ENABLE_EFI
-static int add_partition_esp(DissectedPartition *p, bool has_xbootldr) {
-        const char *esp_path = NULL, *id = NULL;
-        int r;
-
-        assert(p);
-
-        if (in_initrd()) {
-                log_debug("In initrd, ignoring the ESP.");
-                return 0;
-        }
-
-        /* If /efi exists we'll use that. Otherwise we'll use /boot, as that's usually the better choice, but
-         * only if there's no explicit XBOOTLDR partition around. */
-        if (access("/efi", F_OK) < 0) {
-                if (errno != ENOENT)
-                        return log_error_errno(errno, "Failed to determine whether /efi exists: %m");
-
-                /* Use /boot as fallback, but only if there's no XBOOTLDR partition */
-                if (!has_xbootldr) {
-                        esp_path = "/boot";
-                        id = "boot";
-                }
-        }
-        if (!esp_path)
-                esp_path = "/efi";
-        if (!id)
-                id = "efi";
-
-        /* We create an .automount which is not overridden by the .mount from the fstab generator. */
-        r = fstab_is_mount_point(esp_path);
-        if (r < 0)
-                return log_error_errno(r, "Failed to parse fstab: %m");
-        if (r > 0) {
-                log_debug("%s specified in fstab, ignoring.", esp_path);
-                return 0;
-        }
-
-        r = path_is_busy(esp_path);
-        if (r < 0)
-                return r;
-        if (r > 0)
-                return 0;
-
-        if (is_efi_boot()) {
-                sd_id128_t loader_uuid;
-
-                /* If this is an EFI boot, be extra careful, and only mount the ESP if it was the ESP used for booting. */
-
-                r = efi_loader_get_device_part_uuid(&loader_uuid);
-                if (r == -ENOENT) {
-                        log_debug("EFI loader partition unknown.");
-                        return 0;
-                }
-                if (r < 0)
-                        return log_error_errno(r, "Failed to read ESP partition UUID: %m");
-
-                if (!sd_id128_equal(p->uuid, loader_uuid)) {
-                        log_debug("Partition for %s does not appear to be the partition we are booted from.", p->node);
-                        return 0;
-                }
-        } else
-                log_debug("Not an EFI boot, skipping ESP check.");
-
-        return add_automount(id,
-                             p->node,
-                             esp_path,
-                             p->fstype,
-                             /* rw= */ true,
-                             /* growfs= */ false,
-                             esp_or_xbootldr_options(p),
-                             "EFI System Partition Automount",
-                             120 * USEC_PER_SEC);
-}
-#else
-static int add_partition_esp(DissectedPartition *p, bool has_xbootldr) {
-        return 0;
-}
-#endif
-
 static int add_partition_root_rw(DissectedPartition *p) {
         const char *path;
         int r;
@@ -684,18 +556,6 @@ static int enumerate_partitions(dev_t devnum) {
                         r = k;
         }
 
-        if (m->partitions[PARTITION_XBOOTLDR].found) {
-                k = add_partition_xbootldr(m->partitions + PARTITION_XBOOTLDR);
-                if (k < 0)
-                        r = k;
-        }
-
-        if (m->partitions[PARTITION_ESP].found) {
-                k = add_partition_esp(m->partitions + PARTITION_ESP, m->partitions[PARTITION_XBOOTLDR].found);
-                if (k < 0)
-                        r = k;
-        }
-
         if (m->partitions[PARTITION_HOME].found) {
                 k = add_partition_mount(m->partitions + PARTITION_HOME, "home", "/home", "Home Partition");
                 if (k < 0)
-- 
2.45.2

